X-Account-Key: account4
X-UIDL: 0000c82456a584ea
X-Mozilla-Status: 0001
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                 
Return-Path: <ogawa.yasufumi@lab.ntt.co.jp>
X-Original-To: yo128@mail2.ecl.ntt.co.jp
Delivered-To: yo128@mail2.ecl.ntt.co.jp
Received: from dmail1.ecl.ntt.co.jp (dmail1.ecl.ntt.co.jp [129.60.86.151])
	by jcms-pop21.ecl.ntt.co.jp (Postfix) with ESMTP id 03757400224
	for <yo128@mail2.ecl.ntt.co.jp>; Tue, 21 May 2019 11:33:47 +0900 (JST)
Received: by dmail1.ecl.ntt.co.jp (Postfix)
	id 0198923BBDC; Tue, 21 May 2019 11:33:47 +0900 (JST)
Delivered-To: ogawa.yasufumi@lab.ntt.co.jp
Received: from vc1.ecl.ntt.co.jp (vc1.ecl.ntt.co.jp [129.60.86.153])
	by dmail1.ecl.ntt.co.jp (Postfix) with ESMTP id E9D8B23BAF8
	for <ogawa.yasufumi@lab.ntt.co.jp>; Tue, 21 May 2019 11:33:46 +0900 (JST)
Received: from vc1.ecl.ntt.co.jp (localhost [127.0.0.1])
	by vc1.ecl.ntt.co.jp (Postfix) with ESMTP id DADCFEA7954;
	Tue, 21 May 2019 11:33:46 +0900 (JST)
Received: from localhost.localdomain (lobster.nslab.ecl.ntt.co.jp [129.60.13.95])
	by vc1.ecl.ntt.co.jp (Postfix) with ESMTP id CCF0DEA783F;
	Tue, 21 May 2019 11:33:46 +0900 (JST)
From: ogawa.yasufumi@lab.ntt.co.jp
To: spp@dpdk.org,
	ferruh.yigit@intel.com,
	ogawa.yasufumi@lab.ntt.co.jp
Subject: [PATCH 1/6] shared/sec: refactor func for getting VLAN ID
Date: Tue, 21 May 2019 11:31:17 +0900
Message-Id: <1558405882-8201-2-git-send-email-ogawa.yasufumi@lab.ntt.co.jp>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1558405882-8201-1-git-send-email-ogawa.yasufumi@lab.ntt.co.jp>
References: <1558405882-8201-1-git-send-email-ogawa.yasufumi@lab.ntt.co.jp>
X-TM-AS-MML: disable

From: Yasufumi Ogawa <ogawa.yasufumi@lab.ntt.co.jp>

Functions for getting VLAN ID or PCAP are named as `get_int_value()`
and `get_uint_value()`. It is not describing the feature and should be
renamed. This update is to change the names to `get_vlan_int_val()` and
`get_vlan_uint_val()`, and revise comments for the functions.

Signed-off-by: Yasufumi Ogawa <ogawa.yasufumi@lab.ntt.co.jp>
---
 .../secondary/spp_worker_th/cmd_parser.c      | 35 +++++++++----------
 1 file changed, 16 insertions(+), 19 deletions(-)

diff --git a/src/shared/secondary/spp_worker_th/cmd_parser.c b/src/shared/secondary/spp_worker_th/cmd_parser.c
index 1c069cc..cf7a7a6 100644
--- a/src/shared/secondary/spp_worker_th/cmd_parser.c
+++ b/src/shared/secondary/spp_worker_th/cmd_parser.c
@@ -219,36 +219,33 @@ get_arrary_index(const char *match, const char *list[])
 	return SPP_RET_NG;
 }
 
-/* Get int type value */
+/**
+ * Get VLAN ID or PCP as int from given val. It validates if the val is in the
+ * range from min to max given as third and fourth args.
+ */
 static int
-get_int_value(
-		int *output,
-		const char *arg_val,
-		int min,
-		int max)
+get_vlan_int_val(int *output, const char *arg_val, int min, int max)
 {
-	int ret = 0;
+	int ret;
 	char *endptr = NULL;
 	ret = strtol(arg_val, &endptr, 0);
 	if (unlikely(endptr == arg_val) || unlikely(*endptr != '\0'))
 		return SPP_RET_NG;
-
 	if (unlikely(ret < min) || unlikely(ret > max))
 		return SPP_RET_NG;
-
 	*output = ret;
 	return SPP_RET_OK;
 }
 
-/* Get unsigned int type value */
+/**
+ * Get VLAN ID or PCP as uint from given val. It validates if the val is in the
+ * range from min to max given as third and fourth args.
+ */
 static int
-get_uint_value(
-		unsigned int *output,
-		const char *arg_val,
-		unsigned int min,
+get_vlan_uint_val(unsigned int *output, const char *arg_val, unsigned int min,
 		unsigned int max)
 {
-	unsigned int ret = SPP_RET_OK;
+	unsigned int ret;
 	char *endptr = NULL;
 	ret = strtoul(arg_val, &endptr, 0);
 	if (unlikely(endptr == arg_val) || unlikely(*endptr != '\0'))
@@ -292,7 +289,7 @@ static int
 decode_core_value(void *output, const char *arg_val)
 {
 	int ret = SPP_RET_OK;
-	ret = get_uint_value(output, arg_val, 0, RTE_MAX_LCORE-1);
+	ret = get_vlan_uint_val(output, arg_val, 0, RTE_MAX_LCORE-1);
 	if (unlikely(ret < 0)) {
 		RTE_LOG(ERR, SPP_COMMAND_PROC, "Bad core id. val=%s\n",
 				arg_val);
@@ -537,7 +534,7 @@ decode_port_vid(void *output, const char *arg_val,
 
 	switch (ability->ope) {
 	case SPP_PORT_ABILITY_OPE_ADD_VLANTAG:
-		ret = get_int_value(&ability->data.vlantag.vid,
+		ret = get_vlan_int_val(&ability->data.vlantag.vid,
 			arg_val, 0, ETH_VLAN_ID_MAX);
 		if (unlikely(ret < SPP_RET_OK)) {
 			RTE_LOG(ERR, SPP_COMMAND_PROC,
@@ -565,7 +562,7 @@ decode_port_pcp(void *output, const char *arg_val,
 
 	switch (ability->ope) {
 	case SPP_PORT_ABILITY_OPE_ADD_VLANTAG:
-		ret = get_int_value(&ability->data.vlantag.pcp,
+		ret = get_vlan_int_val(&ability->data.vlantag.pcp,
 				arg_val, 0, SPP_VLAN_PCP_MAX);
 		if (unlikely(ret < SPP_RET_OK)) {
 			RTE_LOG(ERR, SPP_COMMAND_PROC,
@@ -652,7 +649,7 @@ decode_classifier_vid_value(void *output, const char *arg_val,
 				int allow_override __attribute__ ((unused)))
 {
 	int ret = SPP_RET_NG;
-	ret = get_int_value(output, arg_val, 0, ETH_VLAN_ID_MAX);
+	ret = get_vlan_int_val(output, arg_val, 0, ETH_VLAN_ID_MAX);
 	if (unlikely(ret < SPP_RET_OK)) {
 		RTE_LOG(ERR, SPP_COMMAND_PROC, "Bad VLAN ID. val=%s\n",
 				arg_val);
-- 
2.17.1


