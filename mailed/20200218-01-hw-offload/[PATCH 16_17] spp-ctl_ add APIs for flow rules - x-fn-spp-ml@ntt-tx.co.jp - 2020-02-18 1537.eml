Delivered-To: yasufum.o@gmail.com
Received: by 2002:a4a:8406:0:0:0:0:0 with SMTP id l6csp6069471oog;
        Mon, 17 Feb 2020 22:37:40 -0800 (PST)
X-Google-Smtp-Source: APXvYqxjEc4UtXWL0I9Sp+dTJ9LKxNtlsk2QLKIbjTAojgy92kGoX6cRVlrHgvwl5OQE5par6gCv
X-Received: by 2002:a62:1d07:: with SMTP id d7mr19652295pfd.159.1582007860588;
        Mon, 17 Feb 2020 22:37:40 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1582007860; cv=none;
        d=google.com; s=arc-20160816;
        b=HNmg8Qr506B+2XI3oPk//ymSd9lRWZRJwy4KHZoaAj/9Hxwmfn40riiQQuvrdI9KRQ
         GZrQ2YPkq+/uayyniHb4EP/qw5Z4/nkHnA8GpRJFZOmYigEyh/MISqgiiedFB/mJ2kIM
         7bGoRbhCeaxP7v7nIEYYvsqQ4lTqpFXlwgTsBEnNT0c9DpC//y3Z+0PDAPpUWCMYNcjJ
         oVsBM++SY2o1qcSEuLqcpnE7tgOdgnDE+vAebtmEsH2BlfjqVQmlGs70/lEJMrVG1j75
         XOXt8TeH78kkvLCTVT6VOtObejzt5aSTy0WibtK+b1VR0v2SKqllK9nXsn15iI7Fv0lS
         fB9w==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=references:in-reply-to:message-id:date:subject:cc:to:from;
        bh=WNbZH0wigAC75jESfxB+yvuGol21YdSAgQ8p/jmTzM0=;
        b=JRlFtoCGLbcCYFjueYancP6B7UUQsO1fqLW90C/S6wKl3kQOy+qr2GbotnLRg1m1qF
         Hq3I1jmB+cu4DMNkraBIlE0oxp3xdwObhKyYfRZ0c78khgmFDIn91I1kevSRhF2+1Fpl
         sFruR/xnlyyOT8pfdoyz8AScWBz93vqaFrEzApCMXk1KB2HdEzOCHvEYC9B+p9SbyWLz
         rFPAglUI+KyyV6H9UkDFklG7aBL8xIENhwOJFcjIXoGySBMr3uXyKGfwuKMQVzMFzEAB
         LGO8PCwnKvX+0p2dJI3CpnJknVgNto+uTI1YDRJTwvVX85F4giqADhOva/PNvu5xY2Iu
         VClg==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: domain of x-fn-spp-ml@ntt-tx.co.jp designates 202.19.227.74 as permitted sender) smtp.mailfrom=x-fn-spp-ml@ntt-tx.co.jp
Return-Path: <x-fn-spp-ml@ntt-tx.co.jp>
Received: from dish-sg.nttdocomo.co.jp (dish-sg.nttdocomo.co.jp. [202.19.227.74])
        by mx.google.com with ESMTP id g16si1908715plq.392.2020.02.17.22.37.40
        for <yasufum.o@gmail.com>;
        Mon, 17 Feb 2020 22:37:40 -0800 (PST)
Received-SPF: pass (google.com: domain of x-fn-spp-ml@ntt-tx.co.jp designates 202.19.227.74 as permitted sender) client-ip=202.19.227.74;
Authentication-Results: mx.google.com;
       spf=pass (google.com: domain of x-fn-spp-ml@ntt-tx.co.jp designates 202.19.227.74 as permitted sender) smtp.mailfrom=x-fn-spp-ml@ntt-tx.co.jp
X-dD-Source: Outbound
Received: from zssg-mailmd106.ddreams.local (zssg-mailmd900.ddreams.local [10.160.172.63])
	by zssg-mailou101.ddreams.local (Postfix) with ESMTP id D18571200F7;
	Tue, 18 Feb 2020 15:37:39 +0900 (JST)
Received: from zssg-mailmf104.ddreams.local
 (zssg-mailmf900.ddreams.local [10.160.172.84]) by zssg-mailmd106.ddreams.local
 (dDREAMS) with ESMTP id <0Q5V0099YX2RT200@dDREAMS>; Tue,
 18 Feb 2020 15:37:39 +0900 (JST)
Received: from zssg-mailmf104.ddreams.local (unknown [127.0.0.1])
	by zssg-mailmf104.ddreams.local (Postfix) with ESMTP id 483357E6032;	Tue,
 18 Feb 2020 15:37:39 +0900 (JST)
Received: from zssg-mailmf104.ddreams.local (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id 46E4B8E605E;	Tue,
 18 Feb 2020 15:37:39 +0900 (JST)
Received: from localhost (unknown [127.0.0.1])	by IMSVA (Postfix)
 with SMTP id 3C0088E6050;	Tue, 18 Feb 2020 15:37:39 +0900 (JST)
X-IMSS-HAND-OFF-DIRECTIVE: localhost:10026
Received: from zssg-mailmf104.ddreams.local (unknown [127.0.0.1])
	by IMSVA (Postfix) with ESMTP id E633A8E605D;	Tue,
 18 Feb 2020 15:37:38 +0900 (JST)
Received: from davinci.ntt-tx.co.jp (unknown [10.160.183.139])
	by zssg-mailmf104.ddreams.local (Postfix) with ESMTP;	Tue,
 18 Feb 2020 15:37:38 +0900 (JST)
From: x-fn-spp-ml@ntt-tx.co.jp
To: ferruh.yigit@intel.com, yasufum.o@gmail.com
Cc: spp@dpdk.org
Subject: [PATCH 16/17] spp-ctl: add APIs for flow rules
Date: Tue, 18 Feb 2020 15:37:19 +0900
Message-id: <20200218063720.6597-17-x-fn-spp-ml@ntt-tx.co.jp>
X-Mailer: git-send-email 2.18.0
In-reply-to: <20200218063720.6597-1-x-fn-spp-ml@ntt-tx.co.jp>
References: <20200218063720.6597-1-x-fn-spp-ml@ntt-tx.co.jp>
X-TM-AS-GCONF: 00

From: Hideyuki Yamashita <yamashita.hideyuki@ntt-tx.co.jp>

This patch implements support of flow APIs in spp-ctl.
  - flow validate
  - flow create
  - flow delete
  - flow flush

Signed-off-by: Hideyuki Yamashita <yamashita.hideyuki@ntt-tx.co.jp>
Signed-off-by: Yasufumi Ogawa <yasufum.o@gmail.com>
---
 src/spp-ctl/spp_proc.py   |   4 +
 src/spp-ctl/spp_webapi.py | 200 ++++++++++++++++++++++++++++++++++++--
 2 files changed, 194 insertions(+), 10 deletions(-)

diff --git a/src/spp-ctl/spp_proc.py b/src/spp-ctl/spp_proc.py
index 35919fb..d584f7f 100644
--- a/src/spp-ctl/spp_proc.py
+++ b/src/spp-ctl/spp_proc.py
@@ -317,6 +317,10 @@ class PrimaryProc(SppProc):
     def stop(self):
         return "stop"
 
+    @exec_command
+    def flow(self, command):
+        return command
+
     @exec_command
     def do_launch_sec_proc(self, args):
         proc_name = args['proc_name']
diff --git a/src/spp-ctl/spp_webapi.py b/src/spp-ctl/spp_webapi.py
index 31befe2..d8e6e73 100644
--- a/src/spp-ctl/spp_webapi.py
+++ b/src/spp-ctl/spp_webapi.py
@@ -34,6 +34,20 @@ class KeyInvalid(bottle.HTTPError):
         super(KeyRequired, self).__init__(400, msg)
 
 
+class RequestJSONDecodeHTTPError(bottle.HTTPError):
+
+    def __init__(self):
+        msg = "Not in json format."
+        super().__init__(400, msg)
+
+
+class ResponseJSONDecodeHTTPError(bottle.HTTPError):
+
+    def __init__(self):
+        msg = "Internal Server Error"
+        super().__init__(500, msg)
+
+
 class BaseHandler(bottle.Bottle):
     """Define common methods for each handler."""
 
@@ -55,7 +69,12 @@ class BaseHandler(bottle.Bottle):
             if_type, if_num = port.split(":")
             if if_type not in PORT_TYPES:
                 raise
-            int(if_num)
+            if if_type == "phy" and "nq" in if_num:
+                port_num, queue_num = if_num.split("nq")
+                int(port_num)
+                int(queue_num)
+            else:
+                int(if_num)
         except Exception:
             raise KeyInvalid('port', port)
 
@@ -75,12 +94,15 @@ class BaseHandler(bottle.Bottle):
         def wrapper(*args, **kwargs):
             req = bottle.request
             if req.method in ["POST", "PUT"]:
-                if req.get_header('Content-Type') == "application/json":
-                    body = req.json
-                else:
-                    body = json.loads(req.body.read().decode())
+                try:
+                    if req.get_header('Content-Type') == "application/json":
+                        body = req.json
+                    else:
+                        body = json.loads(req.body.read().decode())
+                    LOG.info("body: %s", body)
+                except Exception:
+                    raise RequestJSONDecodeHTTPError()
                 kwargs['body'] = body
-                LOG.info("body: %s", body)
             return func(*args, **kwargs)
         return wrapper
 
@@ -103,10 +125,15 @@ class BaseHandler(bottle.Bottle):
             ret = func(*args, **kwargs)
             if ret is None:
                 return bottle.HTTPResponse(status=204)
-            else:
-                r = bottle.HTTPResponse(status=200, body=json.dumps(ret))
-                r.content_type = "application/json"
-                return r
+
+            try:
+                body = json.dumps(ret)
+            except Exception:
+                raise ResponseJSONDecodeHTTPError()
+
+            r = bottle.HTTPResponse(status=200, body=body)
+            r.content_type = "application/json"
+            return r
         return wrapper
 
 
@@ -446,12 +473,16 @@ class V1PrimaryHandler(BaseHandler):
 
     def __init__(self, controller):
         super(V1PrimaryHandler, self).__init__(controller)
+        self._initialize()
 
+    def _initialize(self):
         self.set_route()
 
         self.install(self.make_response)
         self.install(self.get_body)
 
+        self.mount("/flow_rules", V1PrimaryFlowHandler(self.ctrl))
+
     def set_route(self):
         self.route('/status', 'GET', callback=self.get_status)
         self.route('/status', 'DELETE', callback=self.clear_status)
@@ -556,6 +587,155 @@ class V1PrimaryHandler(BaseHandler):
         proc.do_exit()
 
 
+class V1PrimaryFlowHandler(V1PrimaryHandler):
+
+    def __init__(self, controller):
+        super().__init__(controller)
+
+    def _initialize(self):
+        self.set_route()
+
+        self.install(self.make_response)
+        self.install(self.get_body)
+
+    def set_route(self):
+        self.route('/port_id/<port_id:int>/validate',
+                   'POST', callback=self.post_flow_validate)
+        self.route('/port_id/<port_id:int>',
+                   'POST', callback=self.post_flow_create)
+        self.route('/port_id/<port_id:int>',
+                   'DELETE', callback=self.delete_flow_all_destroy)
+        self.route('/<rule_id:int>/port_id/<port_id:int>',
+                   'DELETE', callback=self.delete_flow_destroy)
+
+    def post_flow_validate(self, port_id, body):
+        self._check_request_body(body)
+        command = self._create_flow_rule_command(
+            port_id, body.get("rule"), "validate")
+
+        proc = self._get_proc()
+        return proc.flow(command)
+
+    def post_flow_create(self, port_id, body):
+        self._check_request_body(body)
+        command = self._create_flow_rule_command(
+            port_id, body.get("rule"), "create")
+
+        proc = self._get_proc()
+        return proc.flow(command)
+
+    def delete_flow_all_destroy(self, port_id):
+        command = self._gen_flow_destroy(port_id)
+
+        proc = self._get_proc()
+        return proc.flow(command)
+
+    def delete_flow_destroy(self, rule_id, port_id):
+        command = self._gen_flow_destroy(port_id, rule_id)
+
+        proc = self._get_proc()
+        return proc.flow(command)
+
+    def _create_flow_rule_command(self, port_id, rule, sub_command):
+        attr_data = {}
+        data = {}
+
+        # `group`,` priority`, and `transfer` in` attrs` are optional and
+        # may be omitted
+        attr_command = "{group}{priority}{transfer}{direction}"
+
+        attr_data["direction"] = rule.get("direction")
+
+        if "group" in rule:
+            attr_data["group"] = "group {0} ".format(rule.get("group"))
+        else:
+            attr_data["group"] = ""
+
+        if "priority" in rule:
+            attr_data["priority"] = "priority {0} ".format(
+                rule.get("priority"))
+        else:
+            attr_data["priority"] = ""
+
+        if "transfer" in rule:
+            attr_data["transfer"] = "transfer " if rule.get("transfer") else ""
+        else:
+            attr_data["transfer"] = ""
+
+        attrs = attr_command.format(**attr_data)
+
+        command = "flow {sub_command} {res_uid} {attrs} "
+        command += "pattern {pattern} / end "
+        command += "actions {actions} / end"
+
+        data["sub_command"] = sub_command
+        data["res_uid"] = "phy:{0}".format(port_id)
+        data["attrs"] = attrs
+        data["pattern"] = " / ".join(rule.get("pattern"))
+        data["actions"] = " / ".join(rule.get("actions"))
+
+        return command.format(**data)
+
+    def _gen_flow_destroy(self, port_id, rule_id=None):
+        """Delete a flow of given rule ID, or all flows if the ID is None."""
+        if rule_id is not None:
+            target = int(rule_id)
+        else:
+            target = "ALL"
+        return "flow destroy phy:{0} {1}".format(port_id, target)
+
+    def _check_request_body(self, body):
+        self._check_request_body_required_param(body, "rule", dict)
+        rule = body.get("rule")
+
+        self._check_request_body_optional_param(rule, "group", int)
+        self._check_request_body_optional_param(rule, "priority", int)
+        self._check_request_body_required_param(rule, "direction", str)
+        self._check_request_body_optional_param(rule, "transfer", bool)
+        self._check_request_body_required_param(rule, "pattern", list)
+        self._check_request_body_required_param(rule, "actions", list)
+
+        dir = rule.get("direction")
+        if dir != "ingress" and dir != "egress":
+            raise KeyInvalid("direction", dir)
+
+        pattern = rule.get("pattern")
+        for obj in pattern:
+            if obj is None or type(obj) != str:
+                raise KeyInvalid("pattern", pattern)
+
+        actions = rule.get("actions")
+        for obj in actions:
+            if obj is None or type(obj) != str:
+                raise KeyInvalid("actions", actions)
+
+    def _check_request_body_optional_param(self, target, key_name, obj_type):
+        """Check for optional parameter.
+
+        If key_name exists in dict, checking obj_type.
+        If invalid, raise error class. Return True if valid.
+        """
+        if key_name not in target:
+            return True
+        return self._check_request_body_required_param(
+            target, key_name, obj_type)
+
+    def _check_request_body_required_param(self, target, key_name, obj_type):
+        """Check for required parameter.
+
+        key_name must be present and check obj_type.
+        If invalid, raise error class. Return True if valid.
+        """
+        if key_name not in target:
+            raise KeyRequired(key_name)
+
+        obj = target.get(key_name)
+        if obj is None or type(obj) != obj_type:
+            raise KeyInvalid(key_name, obj)
+
+        return True
+
+
 class V1PcapHandler(BaseHandler):
 
     def __init__(self, controller):
-- 
2.17.1

