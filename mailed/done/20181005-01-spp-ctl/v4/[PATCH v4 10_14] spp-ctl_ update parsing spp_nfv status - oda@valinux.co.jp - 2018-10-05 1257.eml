X-Account-Key: account4
X-UIDL: 00007fd456a584ea
X-Mozilla-Status: 0000
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                 
Return-Path: <oda@valinux.co.jp>
X-Original-To: yo128@mail2.ecl.ntt.co.jp
Delivered-To: yo128@mail2.ecl.ntt.co.jp
Received: from dmail1.ecl.ntt.co.jp (dmail1.ecl.ntt.co.jp [129.60.86.151])
	by jcms-pop21.ecl.ntt.co.jp (Postfix) with ESMTP id 7FFA3400234
	for <yo128@mail2.ecl.ntt.co.jp>; Fri,  5 Oct 2018 12:58:00 +0900 (JST)
Received: by dmail1.ecl.ntt.co.jp (Postfix)
	id 7E77C23BB23; Fri,  5 Oct 2018 12:58:00 +0900 (JST)
Delivered-To: ogawa.yasufumi@lab.ntt.co.jp
Received: from bcmv-imss01.ecl.ntt.co.jp (bcmv-imss01.ecl.ntt.co.jp [129.60.83.122])
	by dmail1.ecl.ntt.co.jp (Postfix) with ESMTP id 7CE6E23BB1A
	for <ogawa.yasufumi@lab.ntt.co.jp>; Fri,  5 Oct 2018 12:58:00 +0900 (JST)
Received: from bcmv-imss01.ecl.ntt.co.jp (localhost [127.0.0.1])
	by bcmv-imss01.ecl.ntt.co.jp (Postfix) with ESMTP id 6A759144
	for <ogawa.yasufumi@lab.ntt.co.jp>; Fri,  5 Oct 2018 12:58:00 +0900 (JST)
Received: from bcma-spm01.ecl.ntt.co.jp (bcma-spm01.ecl.ntt.co.jp [129.60.253.41])
	by bcmv-imss01.ecl.ntt.co.jp (Postfix) with ESMTP id 5795E143
	for <ogawa.yasufumi@lab.ntt.co.jp>; Fri,  5 Oct 2018 12:58:00 +0900 (JST)
Authentication-Results: bcma-spm01.ecl.ntt.co.jp; spf=None smtp.pra=oda@valinux.co.jp; spf=None smtp.mailfrom=oda@valinux.co.jp
Received-SPF: None (bcma-spm01.ecl.ntt.co.jp: no sender
  authenticity information available from domain of
  oda@valinux.co.jp) identity=pra; client-ip=210.128.90.14;
  receiver=bcma-spm01.ecl.ntt.co.jp;
  envelope-from="oda@valinux.co.jp";
  x-sender="oda@valinux.co.jp"; x-conformance=sidf_strict
Received-SPF: None (bcma-spm01.ecl.ntt.co.jp: no sender
  authenticity information available from domain of
  oda@valinux.co.jp) identity=mailfrom;
  client-ip=210.128.90.14; receiver=bcma-spm01.ecl.ntt.co.jp;
  envelope-from="oda@valinux.co.jp";
  x-sender="oda@valinux.co.jp"; x-conformance=sidf_strict
IronPort-PHdr: =?us-ascii?q?9a23=3AB/uyShatJ0IADa9qZBlTCNz/LSx94efdIxIV55?=
 =?us-ascii?q?w7irlHbqWk+dHYMVfC4el21QeSD4/Q7vsBkPLT6/mmVGcEp5CdrDYJd9pOT0?=
 =?us-ascii?q?xNkt0YyionBsPNEkjnNLjydSVvG8hLfEFs+3C9LFgTE8G4ZUWB6maq42s0HR?=
 =?us-ascii?q?PyfRFwOvyzH4fTi8qt0OXn/JHaSxtBgDu7fKM0JxLwrx2I7JssjIBvK7g8xl?=
 =?us-ascii?q?7ymlUSKrwE42RuKBrTlR3574Kr5Js7qmJdsPZn8dJcF679OaYgH/ReC3w9Pm?=
 =?us-ascii?q?Y56deO11GLRBaT5nYaTmQdkwZZSwnD4hbgW57tsyz8/uNj0SieNMfyQPg6Qz?=
 =?us-ascii?q?Onp6tsTRbpjm8AOVtbuCnQhsVYkqtfoRS8t1p0xMjWeMDdNfZzeL/cYcJPXX?=
 =?us-ascii?q?BIDY5aUy1MBJ/5bpNaVbNZe78C/8+s/x1X8UjbZ0HkHu7kxz5Wi2Wj16Y/2q?=
 =?us-ascii?q?E6CQSehUotFNZItmjI6t7ycqUKAoXXhOHFyyvOa/RO1HLz8o/NJ1omrfikQ7?=
 =?us-ascii?q?t0cMzM2Q8kEEXHlh/DzO6tdyPQzekLv2WBuqBnWeuHlWcjqgdssn6kwYEuks?=
 =?us-ascii?q?OazpJQwVfC+yJjxY8zLtDtU093b+m/DIFRvD3DbdlMT8gvQn9ltGMB8pNc6M?=
 =?us-ascii?q?PpWi8MxdxnzRXaYrmca43Qu1TuX+LXJytkwnliPrCn1V609gC7x+vwW9PRsh?=
 =?us-ascii?q?4CpzdZktTKqnEG1gDCosmBRPxn+0692DGJnwnN4+BAKEowmOLVMZkkirI3k5?=
 =?us-ascii?q?MStwzEEEqU0A3xgKa+aEwg++61+6LsZfPkvt7UNoN5jB3/LrV7n8W+BeoiNQ?=
 =?us-ascii?q?1dOgrTse+41bDl4Qj4WOAQ16Vwy/OJ9sGCY51H9eajDgRY05gu8UO1BDKvlc?=
 =?us-ascii?q?8AmCFeal9OfFSBk5SvMFaIIuiraJX3y1mqjjpvwOjLe7P7BZCYZH/PmZ//dL?=
 =?us-ascii?q?J87VNMjgE0i9JHrcExaPlJMLfoV0n9ucaNRBg1OiSqyuLmDshtkIgZH2CXSP?=
 =?us-ascii?q?zRIObZtlmG4fgqKu+HadoOuTrzHOM5/f/lkSZoy29YRrGg2N4sUF79G/1nJ0?=
 =?us-ascii?q?uDZn+134UfGGMLuBcuCuftzl+aA2YKOySCGpkk7zR+M7qISJ/ZT9nw0qKI2C?=
 =?us-ascii?q?a9A40QbWcACEjeSXo=3D?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0B7AACI4LZb/w5agNJbHAEBAQQBAQc?=
 =?us-ascii?q?EAQGBUwUBAQsBggJpbQMECyiMaI1QeJVmgXooEAGEQAKERAYyCw0BAwEBAgE?=
 =?us-ascii?q?BAQFtKIU6BoEJIDEsKwcSgyEBggClbIgugWSHDoFagluCAIESgl2LCwKGVge?=
 =?us-ascii?q?BeIY3jlAJhkqJayKBTI4jLIhYjicBMIFVgUCCbAmQWzAwAXgBAQEBjWoBAQ?=
X-SPF-Status: none
Received: from vagw.valinux.co.jp (HELO valinux.co.jp) ([210.128.90.14])
  by bcma-spm01.ecl.ntt.co.jp with ESMTP; 05 Oct 2018 12:58:00 +0900
Received: by valinux.co.jp (Postfix, from userid 1000)
	id EE4F9240CDC; Fri,  5 Oct 2018 12:57:58 +0900 (JST)
From: oda@valinux.co.jp
To: spp@dpdk.org,
	ferruh.yigit@intel.com,
	ogawa.yasufumi@lab.ntt.co.jp
Subject: [PATCH v4 10/14] spp-ctl: update parsing spp_nfv status
Date: Fri,  5 Oct 2018 12:57:53 +0900
Message-Id: <20181005035757.23122-11-oda@valinux.co.jp>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20181005035757.23122-1-oda@valinux.co.jp>
References: <20180913082544.2D36.277DD91C@valinux.co.jp>
 <20181005035757.23122-1-oda@valinux.co.jp>
X-TM-AS-MML: No

From: Yasufumi Ogawa <ogawa.yasufumi@lab.ntt.co.jp>

Update for parsing the result of status of spp_nfv.

Signed-off-by: Yasufumi Ogawa <ogawa.yasufumi@lab.ntt.co.jp>
Signed-off-by: Itsuro Oda <oda@valinux.co.jp>
---
 src/spp-ctl/spp_webapi.py | 66 +++++++++++++++++----------------------
 1 file changed, 28 insertions(+), 38 deletions(-)

diff --git a/src/spp-ctl/spp_webapi.py b/src/spp-ctl/spp_webapi.py
index 435c4b7..ee47f2f 100644
--- a/src/spp-ctl/spp_webapi.py
+++ b/src/spp-ctl/spp_webapi.py
@@ -318,50 +318,40 @@ class V1NFVHandler(BaseHandler):
         self.route('/<sec_id:int>/patches', 'DELETE',
                    callback=self.nfv_patch_del)
 
-    def convert_nfv_info(self, data):
+    def convert_nfv_info(self, sec_id, data):
         nfv = {}
-        lines = data.splitlines()
-        if len(lines) < 3:
+
+        # spp_nfv returns status info in two lines. First line is
+        # status of running or idling, and second is patch info.
+        # 'null' means that it has no dst port.
+        #   "status: idling\nports: 'phy:0-phy:1,phy:1-null'\x00\x00.."
+        entries = data.split('\n')
+        if len(entries) != 2:
             return {}
-        p = re.compile("Client ID (\d+) (\w+)")
-        m = p.match(lines[0])
-        if m:
-            nfv['client_id'] = int(m.group(1))
-            nfv['status'] = m.group(2)
-
-        ports = {}
-        outs = []
-        for line in lines[2:]:
-            if not line.startswith("port_id"):
-                break
-            arg1, _, arg2, arg3 = line.split(",")
-            _, port_id = arg1.split(":")
-            if arg2 == "PHY":
-                port = "phy:" + port_id
-            else:
-                if_type, rest = arg2.split("(")
-                if_num = rest.rstrip(")")
-                if if_type == "RING":
-                    port = "ring:" + if_num
-                elif if_type == "VHOST":
-                    port = "vhost:" + if_num
-                else:
-                    port = if_type + ":" + if_num
-            ports[port_id] = port
-            _, out_id = arg3.split(":")
-            if out_id != "none":
-                outs.append((port_id, out_id))
-        nfv['ports'] = list(ports.values())
-        patches = []
-        if outs:
-            for src_id, dst_id in outs:
-                patches.append({"src": ports[src_id], "dst": ports[dst_id]})
-        nfv['patches'] = patches
+
+        nfv['client_id'] = int(sec_id)
+        nfv['status'] = entries[0].split()[1]
+
+        patch_list = entries[1].split()[1].replace("'", '')
+
+        ports = []
+        nfv['patches'] = []
+
+        for port_cmb in patch_list.split(','):
+            p_src, p_dst = port_cmb.split('-')
+            if p_src != 'null' and p_dst != 'null':
+                nfv['patches'].append({'src': p_src, 'dst': p_dst})
+
+            for port in [p_src, p_dst]:
+                if port != 'null':
+                    ports.append(port)
+
+        nfv['ports'] = list(set(ports))
 
         return nfv
 
     def nfv_get(self, proc):
-        return self.convert_nfv_info(proc.get_status())
+        return self.convert_nfv_info(proc.id, proc.get_status())
 
     def _validate_nfv_forward(self, body):
         if 'action' not in body:
-- 
2.17.1


