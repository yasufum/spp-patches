Delivered-To: yasufum.o@gmail.com
Received: by 2002:a4a:8406:0:0:0:0:0 with SMTP id l6csp2331123oog;
        Tue, 25 Feb 2020 17:37:48 -0800 (PST)
X-Google-Smtp-Source: APXvYqw+qa5DgJTbIw9ReflI7pFSPizZHCfhRlIVK4CxxhZ9DUsrJQSXOPYhl2Y4N+08HfPgbt3T
X-Received: by 2002:a17:902:d20f:: with SMTP id t15mr1496856ply.55.1582681068463;
        Tue, 25 Feb 2020 17:37:48 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1582681068; cv=none;
        d=google.com; s=arc-20160816;
        b=bEQWdcS9BbPrfqw1FOuJdaLjxbspwbtslnb72Fg/pNVjqizOdrhYrL6UO3B2/onIae
         v6dO53s2aQEhvavcC3Rrgbe0G2EUxrB+hhfomcTz8QffXL3itQjgJzf1lkgGyTYN0N+Z
         4L7tAzLTB/23WQsvoV19OlCz2iNvs93L965oW1dDZHFcIXHLAlwF40gixN1x+kDNyY+F
         J7XDCZ2D1IClY3ZHfwA3YyvD/vcO2FkZklFbHpaf1h29oEQnjqb4RL0nT4rGOWKeRKLA
         pqxfXOLm3NxnMKwxayh9NwlZONjsNvZ40PFRczFIBdsjtIRkAGunEkMytCLxwTndmFTu
         apcg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=references:in-reply-to:message-id:date:subject:to:from;
        bh=BSDi6GTc9+GvQzVzGidY1gg8eSHIToHYrjyxuV6RkD8=;
        b=tAL4L5S7DpYs2xVQzTiWk67fBC6jif2acRYINNN7rcl+9if0pI1AwG2NTD74Ll3fp7
         AUtG2qV/07oGnwm54KcIUFZ6YTEFKX/SbelL3DwKVviINdaFQCf7wbzZrUfIrESh2cCm
         4wMScOqARf6xYzScpA7Kh3793Tgw5ldgAqrkrD2w+O2KXzKvnMiyOuOkknR3jSoc0i1P
         AoY9l58e7xBeUnjizG3oeXqJSu6VXIg2QgVpBn9ZgKPm3ANfwBhOaAzU5uR/nitoHCqR
         RwSoBmmqUCVM/lp8Mkwvb4eijdNDjCp7NksoJJAWyfA9lj4tpxaOQym7TUZWUFbMWvPg
         u87A==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of oda@valinux.co.jp designates 210.128.90.14 as permitted sender) smtp.mailfrom=oda@valinux.co.jp
Return-Path: <oda@valinux.co.jp>
Received: from valinux.co.jp (vagw.valinux.co.jp. [210.128.90.14])
        by mx.google.com with ESMTP id h97si760911pjb.11.2020.02.25.17.37.47
        for <yasufum.o@gmail.com>;
        Tue, 25 Feb 2020 17:37:48 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of oda@valinux.co.jp designates 210.128.90.14 as permitted sender) client-ip=210.128.90.14;
Authentication-Results: mx.google.com;
       spf=pass (google.com: best guess record for domain of oda@valinux.co.jp designates 210.128.90.14 as permitted sender) smtp.mailfrom=oda@valinux.co.jp
Received: by valinux.co.jp (Postfix, from userid 1000)
	id CDD7D24086A; Wed, 26 Feb 2020 10:37:46 +0900 (JST)
From: Itsuro Oda <oda@valinux.co.jp>
To: spp@dpdk.org,
	ferruh.yigit@intel.com,
	yasufum.o@gmail.com
Subject: [PATCH 2/5] primary: suport pipe PMD
Date: Wed, 26 Feb 2020 10:37:43 +0900
Message-Id: <20200226013746.2875-3-oda@valinux.co.jp>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20200226013746.2875-1-oda@valinux.co.jp>
References: <20200226013746.2875-1-oda@valinux.co.jp>

This patch enables the primary to handle add/del request of
pipe PMD. The primary comes to return infomation of pipes in
the response of status request too.

Signed-off-by: Itsuro Oda <oda@valinux.co.jp>
---
 src/primary/main.c | 85 +++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 77 insertions(+), 8 deletions(-)

diff --git a/src/primary/main.c b/src/primary/main.c
index d3828e8..8d6a83d 100644
--- a/src/primary/main.c
+++ b/src/primary/main.c
@@ -27,7 +27,9 @@
  */
 #define PRI_BUF_SIZE_LCORE 128
 #define PRI_BUF_SIZE_PHY 512
-#define PRI_BUF_SIZE_RING (MSG_SIZE - PRI_BUF_SIZE_LCORE - PRI_BUF_SIZE_PHY)
+#define PRI_BUF_SIZE_PIPE 512
+#define PRI_BUF_SIZE_RING \
+	(MSG_SIZE - PRI_BUF_SIZE_LCORE - PRI_BUF_SIZE_PHY - PRI_BUF_SIZE_PIPE)
 
 #define SPP_PATH_LEN 1024  /* seems enough for path of spp procs */
 #define NOF_TOKENS 48  /* seems enough to contain tokens */
@@ -49,6 +51,7 @@
 struct port_id_map {
 	int port_id;
 	enum port_type type;
+	int rx_ring_id, tx_ring_id;  /* for pipe */
 };
 
 struct port_id_map port_id_list[RTE_MAX_ETHPORTS];
@@ -437,6 +440,10 @@ append_port_info_json(char *str,
 			sprintf(str + strlen(str), "\"memif:%u\",",
 					port_map[i].id);
 			break;
+		case PIPE:
+			sprintf(str + strlen(str), "\"pipe:%u\",",
+					port_map[i].id);
+			break;
 		case UNDEF:
 			/* TODO(yasufum) Need to remove print for undefined ? */
 			sprintf(str + strlen(str), "\"udf\",");
@@ -521,6 +528,12 @@ append_patch_info_json(char *str,
 					"\"memif:%u\",",
 					port_map[i].id);
 			break;
+		case PIPE:
+			RTE_LOG(INFO, SHARED, "Type: PIPE\n");
+			sprintf(patch_str + strlen(patch_str),
+					"\"pipe:%u\",",
+					port_map[i].id);
+			break;
 		case UNDEF:
 			RTE_LOG(INFO, PRIMARY, "Type: UDF\n");
 			/* TODO(yasufum) Need to remove print for undefined ? */
@@ -583,6 +596,12 @@ append_patch_info_json(char *str,
 						"\"memif:%u\"",
 						port_map[j].id);
 				break;
+			case PIPE:
+				RTE_LOG(INFO, SHARED, "Type: PIPE\n");
+				sprintf(patch_str + strlen(patch_str),
+						"\"pipe:%u\"",
+						port_map[j].id);
+				break;
 			case UNDEF:
 				RTE_LOG(INFO, PRIMARY, "Type: UDF\n");
 				/*
@@ -729,6 +748,34 @@ ring_port_stats_json(char *str)
 	return 0;
 }
 
+static int
+pipes_json(char *str)
+{
+	uint16_t dev_id;
+	char pipe_buf[30];  /* it is enough if port_id < 1000 */
+	int find = 0;
+
+	strcpy(str, "\"pipes\":[");
+	for (dev_id = 0; dev_id < RTE_MAX_ETHPORTS; dev_id++) {
+		if (port_id_list[dev_id].type != PIPE)
+			continue;
+		sprintf(pipe_buf, "{\"id\":%d,\"rx\":%d,\"tx\":%d}",
+				port_id_list[dev_id].port_id,
+				port_id_list[dev_id].rx_ring_id,
+				port_id_list[dev_id].tx_ring_id);
+		if (strlen(str) + strlen(pipe_buf) > PRI_BUF_SIZE_PIPE - 3) {
+			RTE_LOG(ERR, PRIMARY, "Cannot send all of pipes\n");
+			break;
+		}
+		if (find)
+			strcat(str, ",");
+		find = 1;
+		strcat(str, pipe_buf);
+	}
+	strcat(str, "]");
+	return 0;
+}
+
 /**
  * Retrieve all of statu of ports as JSON format managed by primary.
  *
@@ -770,28 +817,33 @@ get_status_json(char *str)
 	char buf_lcores[PRI_BUF_SIZE_LCORE];
 	char buf_phy_ports[PRI_BUF_SIZE_PHY];
 	char buf_ring_ports[PRI_BUF_SIZE_RING];
+	char buf_pipes[PRI_BUF_SIZE_PIPE];
 	memset(buf_phy_ports, '\0', PRI_BUF_SIZE_PHY);
 	memset(buf_ring_ports, '\0', PRI_BUF_SIZE_RING);
 	memset(buf_lcores, '\0', PRI_BUF_SIZE_LCORE);
+	memset(buf_pipes, '\0', PRI_BUF_SIZE_PIPE);
 
 	append_lcore_info_json(buf_lcores, lcore_id_used);
 	phy_port_stats_json(buf_phy_ports);
 	ring_port_stats_json(buf_ring_ports);
+	pipes_json(buf_pipes);
 
-	RTE_LOG(INFO, PRIMARY, "%s, %s\n", buf_phy_ports, buf_ring_ports);
+	RTE_LOG(INFO, PRIMARY, "%s, %s, %s\n", buf_phy_ports, buf_ring_ports,
+			buf_pipes);
 
 	if (get_forwarding_flg() == 1) {
 		char tmp_buf[512];
 		memset(tmp_buf, '\0', sizeof(tmp_buf));
 		forwarder_status_json(tmp_buf);
 
-		sprintf(str, "{%s,%s,%s,%s}",
+		sprintf(str, "{%s,%s,%s,%s,%s}",
 				buf_lcores, tmp_buf, buf_phy_ports,
-				buf_ring_ports);
+				buf_ring_ports, buf_pipes);
 
 	} else {
-		sprintf(str, "{%s,%s,%s}",
-				buf_lcores, buf_phy_ports, buf_ring_ports);
+		sprintf(str, "{%s,%s,%s,%s}",
+				buf_lcores, buf_phy_ports, buf_ring_ports,
+				buf_pipes);
 	}
 
 	return 0;
@@ -803,7 +855,7 @@ get_status_json(char *str)
  */
 /* TODO(yasufum) consider to merge do_add in nfv/commands.h */
 static int
-add_port(char *p_type, int p_id)
+add_port(char *p_type, int p_id, char **token_list)
 {
 	uint16_t dev_id;
 	uint16_t port_id;
@@ -840,6 +892,17 @@ add_port(char *p_type, int p_id)
 		res = add_null_pmd(p_id);
 		port_id_list[cnt].port_id = p_id;
 		port_id_list[cnt].type = NULLPMD;
+	} else if (!strcmp(p_type, "pipe")) {
+		char *dummy;
+		res = add_pipe_pmd(p_id, token_list[0], token_list[1]);
+		if (res < 0)
+			return -1;
+		port_id_list[cnt].port_id = p_id;
+		port_id_list[cnt].type = PIPE;
+		parse_resource_uid(token_list[0], &dummy,
+				&port_id_list[cnt].rx_ring_id);
+		parse_resource_uid(token_list[1], &dummy,
+				&port_id_list[cnt].tx_ring_id);
 	}
 
 	if (res < 0)
@@ -922,6 +985,12 @@ del_port(char *p_type, int p_id)
 		if (dev_id == PORT_RESET)
 			return -1;
 		dev_detach_by_port_id(dev_id);
+
+	} else if (!strcmp(p_type, "pipe")) {
+		dev_id = find_ethdev_id(p_id, PIPE);
+		if (dev_id == PORT_RESET)
+			return -1;
+		dev_detach_by_port_id(dev_id);
 	}
 
 	port_id_list[dev_id].port_id = PORT_RESET;
@@ -1022,7 +1091,7 @@ parse_command(char *str)
 			return ret;
 		}
 
-		if (add_port(p_type, p_id) < 0) {
+		if (add_port(p_type, p_id, &token_list[2]) < 0) {
 			RTE_LOG(ERR, PRIMARY, "Failed to add_port()\n");
 			sprintf(result, "%s", "\"failed\"");
 		} else
-- 
2.17.1

