Delivered-To: yasufum.o@gmail.com
Received: by 2002:a4a:8406:0:0:0:0:0 with SMTP id l6csp1974826oog;
        Sun, 1 Mar 2020 16:00:39 -0800 (PST)
X-Google-Smtp-Source: APXvYqzgPNbZBepw6qejpHJRYH4AOOugC+Yu0znxRwNUQxb/DJYXTvURo6TJTc1Mqdn5Q/eOLUHW
X-Received: by 2002:a17:902:9f86:: with SMTP id g6mr14159999plq.299.1583107239722;
        Sun, 01 Mar 2020 16:00:39 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1583107239; cv=none;
        d=google.com; s=arc-20160816;
        b=QdzqNKW7wO8A8BE8n5bYYpM8W8X62RiDHNX7cl16qgcvY5ro+GzddeP3YvMUp1Gtpl
         n6+gOjf4/ucjv3W8xK7BjSlQl0JI36Fz27QlPv5UuAYCqwzseRm8sE/9d4l3kJNt8xcO
         RMSqREf0uFavVKOPoke+Idi233JfAHo/D22k0dnOqE+Y/w2+yz+G6+frL0QS2QPNfoao
         DqGYYO7/0J7F1vUaxt3HEvgMKiaLz5P6rMjXZ4NZ+NpvZaEY8BFOHNr0ClchD1GJaKz+
         cSV7vQQcbSYDKuwtlykbv0W1SfcMZ5AQEUGygfteC04pwq+p0xLi7zZ1Hbq6QOas/tX4
         jqPA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=references:in-reply-to:message-id:date:subject:to:from;
        bh=7o9jtG4Ayk/cLKHKYLtGcutb7fnT9JcD5A6q9QtBQIA=;
        b=Iyr/RMYW21oqz00apThd2m8o6qcNjbasvEaHZ8Dhy/GIPrfpcvr1KXddHMGaof0vkZ
         /IZ/TAmUpcR/jqPpfbNjA+eH8oDIRq2VTX4QyRYuzFgzbz70Fy9Q/MJksKj9x3mQ978T
         UVY6Zm/RPe65I4zsqe+2rf6Gx3RnMUJUSUrej1jCR1s5sT14DY7jbIao4DjX+wpeH5xu
         2i19It9d/M7IJcSzoQMynEKeSAtA3SYAysKA3W9Hu61sgzTBuKfHTD9Lw6YbqKd9+kL9
         w4z8UZ06oF5j2auf7wYkaPJMZBMEtvziJFBZQy3EJ1gJarI/OeauvmTMznQ9rpNFrE3C
         XwRQ==
ARC-Authentication-Results: i=1; mx.google.com;
       spf=pass (google.com: best guess record for domain of oda@valinux.co.jp designates 210.128.90.14 as permitted sender) smtp.mailfrom=oda@valinux.co.jp
Return-Path: <oda@valinux.co.jp>
Received: from valinux.co.jp (vagw.valinux.co.jp. [210.128.90.14])
        by mx.google.com with ESMTP id x67si5225017pgb.364.2020.03.01.16.00.38
        for <yasufum.o@gmail.com>;
        Sun, 01 Mar 2020 16:00:39 -0800 (PST)
Received-SPF: pass (google.com: best guess record for domain of oda@valinux.co.jp designates 210.128.90.14 as permitted sender) client-ip=210.128.90.14;
Authentication-Results: mx.google.com;
       spf=pass (google.com: best guess record for domain of oda@valinux.co.jp designates 210.128.90.14 as permitted sender) smtp.mailfrom=oda@valinux.co.jp
Received: by valinux.co.jp (Postfix, from userid 1000)
	id 882A7240CEE; Mon,  2 Mar 2020 09:00:37 +0900 (JST)
From: Itsuro Oda <oda@valinux.co.jp>
To: spp@dpdk.org,
	ferruh.yigit@intel.com,
	yasufum.o@gmail.com
Subject: [PATCH v3 1/3] vdev_test: simple tool to perform packet forwarding for vdev
Date: Mon,  2 Mar 2020 09:00:35 +0900
Message-Id: <20200302000037.30578-2-oda@valinux.co.jp>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20200302000037.30578-1-oda@valinux.co.jp>
References: <20200226020245.3037-1-oda@valinux.co.jp>
 <20200302000037.30578-1-oda@valinux.co.jp>

vdev_test is a simple tool to perform packet forwarding for
virtual ethernet devices. It is mainly to test pipe PMD
because testpmd can not be secondary process but vdev_test
can be.

Signed-off-by: Itsuro Oda <oda@valinux.co.jp>
---
 tools/vdev_test/Makefile    |  25 ++++
 tools/vdev_test/vdev_test.c | 235 ++++++++++++++++++++++++++++++++++++
 2 files changed, 260 insertions(+)
 create mode 100644 tools/vdev_test/Makefile
 create mode 100644 tools/vdev_test/vdev_test.c

diff --git a/tools/vdev_test/Makefile b/tools/vdev_test/Makefile
new file mode 100644
index 0000000..aabd9c4
--- /dev/null
+++ b/tools/vdev_test/Makefile
@@ -0,0 +1,25 @@
+# SPDX-License-Identifier: BSD-3-Clause
+# Copyright(c) 2020 Nippon Telegraph and Telephone Corporation
+
+ifeq ($(RTE_SDK),)
+$(error "Please define RTE_SDK environment variable")
+endif
+
+# Default target, can be overridden by command line or environment
+RTE_TARGET ?= x86_64-native-linuxapp-gcc
+
+include $(RTE_SDK)/mk/rte.vars.mk
+
+# binary name
+APP = vdev_test
+
+# all source are stored in SRCS-y
+SRCS-y := vdev_test.c
+
+CFLAGS += -O3
+CFLAGS += $(WERROR_FLAGS)
+
+SPP_DRIVERS_DIR = $(BASE_OUTPUT)/src/drivers
+EXTRA_LDLIBS = -L$(SPP_DRIVERS_DIR)/vhost -L$(SPP_DRIVERS_DIR)/pipe --whole-archive -lrte_pmd_spp_vhost -lrte_pmd_spp_pipe --no-whole-archive
+
+include $(RTE_SDK)/mk/rte.extapp.mk
diff --git a/tools/vdev_test/vdev_test.c b/tools/vdev_test/vdev_test.c
new file mode 100644
index 0000000..138b67c
--- /dev/null
+++ b/tools/vdev_test/vdev_test.c
@@ -0,0 +1,235 @@
+/* SPDX-License-Identifier: BSD-3-Clause
+ * Copyright(c) 2019 Nippon Telegraph and Telephone Corporation
+ */
+
+#include <getopt.h>
+#include <signal.h>
+#include <stdint.h>
+#include <inttypes.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <sys/time.h>
+
+#include <rte_eal.h>
+#include <rte_ethdev.h>
+#include <rte_ether.h>
+#include <rte_cycles.h>
+#include <rte_lcore.h>
+#include <rte_mbuf.h>
+#include <rte_eth_ring.h>
+#include <rte_bus_vdev.h>
+
+#define RING_SIZE 128
+#define BURST_SIZE 32
+#define NUM_MBUFS 8191
+#define MBUF_CACHE_SIZE 512
+
+#define PKTMBUF_POOL_NAME "MProc_pktmbuf_pool"
+
+static int tx_first;
+static char *device;
+static char *devargs;
+static int force_quit;
+
+static struct option lopts[] = {
+	{"send", no_argument, &tx_first, 1},
+	{"create", required_argument, NULL, 'c'},
+	{NULL, 0, 0, 0}
+};
+
+static const struct rte_eth_conf port_conf_default = {
+	.rxmode = { .max_rx_pkt_len = RTE_ETHER_MAX_LEN }
+};
+
+static int
+parse_args(int argc, char *argv[])
+{
+	int c;
+
+	while ((c = getopt_long(argc, argv, "", lopts, NULL)) != -1) {
+		switch (c) {
+		case 0:
+			/* long option */
+			break;
+		case 'c':
+			/* --create */
+			devargs = optarg;
+			break;
+		default:
+			/* invalid option */
+			return -1;
+		}
+	}
+
+	if (optind != argc - 1)
+		return -1;
+
+	device = argv[optind];
+
+	return 0;
+}
+
+static void
+signal_handler(int signum)
+{
+	printf("signel %d received\n", signum);
+	force_quit = 1;
+}
+
+int
+main(int argc, char *argv[])
+{
+	int ret;
+	uint16_t port_id;
+	uint16_t nb_ports;
+	struct rte_mempool *mbuf_pool = NULL;
+	struct rte_mbuf *m;
+	uint16_t nb_tx;
+	struct rte_mbuf *bufs[BURST_SIZE];
+	uint16_t nb_rx;
+	struct rte_eth_conf port_conf = port_conf_default;
+	struct rte_eth_stats stats;
+	struct timeval t0, t1;
+	long total;
+	uint16_t buf;
+	int i;
+
+	ret = rte_eal_init(argc, argv);
+	if (ret < 0)
+		rte_exit(EXIT_FAILURE, "EAL initialization failed\n");
+	argc -= ret;
+	argv += ret;
+
+	ret = parse_args(argc, argv);
+	if (ret < 0) {
+		rte_exit(EXIT_FAILURE,
+			"usage: vdev_test <eal options> -- "
+			"[--send] [--create devargs] vdev\n");
+	}
+	printf("device: %s tx_first: %d devargs: %s\n", device,
+		       tx_first, devargs);
+
+	if (strncmp("spp_pipe", device, 8) == 0) {
+		if (rte_eal_process_type() != RTE_PROC_SECONDARY)
+			rte_exit(EXIT_FAILURE, "must be secondary\n");
+	}
+
+	if (devargs) {
+		/* --create */
+		ret = rte_eth_dev_get_port_by_name(device, &port_id);
+		if (ret == 0)
+			rte_exit(EXIT_FAILURE,
+				"%s already exists.\n", device);
+		for (i = 0; i < 3; i++) {
+			ret = rte_eal_hotplug_add("vdev", device, devargs);
+			if (ret == 0)
+				break;
+			sleep(1);
+		}
+		if (ret < 0)
+			rte_exit(EXIT_FAILURE,
+				"%s %s create failed.\n", device, devargs);
+	}
+
+	ret = rte_eth_dev_get_port_by_name(device, &port_id);
+	if (ret < 0)
+		rte_exit(EXIT_FAILURE, "device not found\n");
+
+	printf("port_id: %u\n", (unsigned int)port_id);
+
+	nb_ports = rte_eth_dev_count_avail();
+	/* just information */
+	printf("num port: %u\n", (unsigned int)nb_ports);
+
+	if (rte_eal_process_type() == RTE_PROC_SECONDARY) {
+		mbuf_pool = rte_mempool_lookup(PKTMBUF_POOL_NAME);
+	} else {
+		mbuf_pool = rte_pktmbuf_pool_create("MBUF_POOL", NUM_MBUFS,
+			MBUF_CACHE_SIZE, 0, RTE_MBUF_DEFAULT_BUF_SIZE,
+			rte_socket_id());
+	}
+	if (mbuf_pool == NULL)
+		rte_exit(EXIT_FAILURE, "Cannot get mbuf pool\n");
+
+	if (strncmp("virtio_user", device, 11) == 0)
+		port_conf.intr_conf.lsc = 1;
+
+	ret = rte_eth_dev_configure(port_id, 1, 1, &port_conf);
+	if (ret != 0)
+		rte_exit(EXIT_FAILURE, "rte_eth_dev_configure failed\n");
+
+	ret = rte_eth_rx_queue_setup(port_id, 0, RING_SIZE,
+		rte_eth_dev_socket_id(port_id), NULL, mbuf_pool);
+	if (ret < 0)
+		rte_exit(EXIT_FAILURE, "rte_eth_rx_queue_setup failed\n");
+
+	ret = rte_eth_tx_queue_setup(port_id, 0, RING_SIZE,
+			rte_eth_dev_socket_id(port_id), NULL);
+	if (ret < 0)
+		rte_exit(EXIT_FAILURE, "rte_eth_tx_queue_setup failed\n");
+
+	ret = rte_eth_dev_start(port_id);
+	if (ret < 0)
+		rte_exit(EXIT_FAILURE, "rte_eth_dev_start failed\n");
+
+	force_quit = 0;
+	signal(SIGINT, signal_handler);
+	signal(SIGTERM, signal_handler);
+
+	if (tx_first) {
+		/* send a packet */
+		m = rte_pktmbuf_alloc(mbuf_pool);
+		if (m == NULL) {
+			fprintf(stderr, "rte_pktmbuf_alloc failed\n");
+			goto out;
+		}
+		if (rte_pktmbuf_append(m, RTE_ETHER_MIN_LEN) == NULL) {
+			fprintf(stderr, "rte_pktmbuf_append failed\n");
+			goto out;
+		}
+
+		nb_tx = rte_eth_tx_burst(port_id, 0, &m, 1);
+		if (nb_tx != 1) {
+			fprintf(stderr, "can not send a packet\n");
+			rte_pktmbuf_free(m);
+			goto out;
+		}
+		printf("send a packet\n");
+		gettimeofday(&t0, NULL);
+	}
+
+	/* receive and send a packet */
+	while (!force_quit) {
+		nb_rx = rte_eth_rx_burst(port_id, 0, bufs, BURST_SIZE);
+		if (nb_rx > 0) {
+			nb_tx = rte_eth_tx_burst(port_id, 0, bufs, nb_rx);
+			for (buf = nb_tx; buf < nb_rx; buf++)
+				rte_pktmbuf_free(bufs[buf]);
+		}
+	}
+
+	gettimeofday(&t1, NULL);
+
+	ret = rte_eth_stats_get(port_id, &stats);
+	if (ret == 0) {
+		printf("ipackets: %lu\n", stats.ipackets);
+		printf("opackets: %lu\n", stats.opackets);
+		printf("ierrors: %lu\n", stats.ierrors);
+		printf("oerrors: %lu\n", stats.oerrors);
+		if (tx_first) {
+			total = (t1.tv_sec - t0.tv_sec) * 1000000
+				+ t1.tv_usec - t0.tv_usec;
+			printf("%ld us: %.2f packet/s\n", total,
+				(double)stats.ipackets / total * 1000000);
+		}
+	}
+
+out:
+	rte_eth_dev_stop(port_id);
+	rte_eth_dev_close(port_id);
+
+	if (devargs)
+		rte_eal_hotplug_remove("vdev", device);
+
+	return 0;
+}
-- 
2.17.1

