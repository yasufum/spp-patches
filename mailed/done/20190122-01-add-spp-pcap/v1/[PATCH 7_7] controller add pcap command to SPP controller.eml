From - Tue Jan 22 17:36:44 2019
X-Account-Key: account1
X-UIDL: 00009a2456a584ea
X-Mozilla-Status: 0001
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                 
Return-Path: <x-fn-spp@sl.ntt-tx.co.jp>
X-Original-To: yo128@mail2.ecl.ntt.co.jp
Delivered-To: yo128@mail2.ecl.ntt.co.jp
Received: from dmail2.ecl.ntt.co.jp (dmail2.ecl.ntt.co.jp [129.60.86.152])
	by jcms-pop21.ecl.ntt.co.jp (Postfix) with ESMTP id 82F4E400BC2
	for <yo128@mail2.ecl.ntt.co.jp>; Tue, 22 Jan 2019 17:31:11 +0900 (JST)
Received: by dmail2.ecl.ntt.co.jp (Postfix)
	id 80B5C7F0B8; Tue, 22 Jan 2019 17:31:11 +0900 (JST)
Delivered-To: ogawa.yasufumi@lab.ntt.co.jp
Received: from vc2.ecl.ntt.co.jp (vc2.ecl.ntt.co.jp [129.60.86.154])
	by dmail2.ecl.ntt.co.jp (Postfix) with ESMTP id 7F8627F08E
	for <ogawa.yasufumi@lab.ntt.co.jp>; Tue, 22 Jan 2019 17:31:11 +0900 (JST)
Received: from vc2.ecl.ntt.co.jp (localhost [127.0.0.1])
	by vc2.ecl.ntt.co.jp (Postfix) with ESMTP id 6FC5C638FAB
	for <ogawa.yasufumi@lab.ntt.co.jp>; Tue, 22 Jan 2019 17:31:11 +0900 (JST)
Received: from dcma-spm01.ecl.ntt.co.jp (unknown [129.60.87.149])
	by vc2.ecl.ntt.co.jp (Postfix) with ESMTP id 49597638DB7
	for <ogawa.yasufumi@lab.ntt.co.jp>; Tue, 22 Jan 2019 17:31:11 +0900 (JST)
Authentication-Results: dcma-spm01.ecl.ntt.co.jp; spf=Pass smtp.pra=x-fn-spp@sl.ntt-tx.co.jp; spf=Pass smtp.mailfrom=x-fn-spp@sl.ntt-tx.co.jp
Received-SPF: Pass (dcma-spm01.ecl.ntt.co.jp: domain of
  x-fn-spp@sl.ntt-tx.co.jp designates 210.232.35.69 as
  permitted sender) identity=pra; client-ip=210.232.35.69;
  receiver=dcma-spm01.ecl.ntt.co.jp;
  envelope-from="x-fn-spp@sl.ntt-tx.co.jp";
  x-sender="x-fn-spp@sl.ntt-tx.co.jp";
  x-conformance=sidf_strict; x-record-type="v=spf1";
  x-record-text="v=spf1 a:mail03.ics.ntt-tx.co.jp
  a:mail04.ics.ntt-tx.co.jp a:mail05.ics.ntt-tx.co.jp
  a:mail06.ics.ntt-tx.co.jp a:mail07.ics.ntt-tx.co.jp
  a:mail08.ics.ntt-tx.co.jp ip4:210.232.35.195
  ip4:210.232.35.196 ip4:210.232.35.65 ip4:210.232.35.66 ~all"
Received-SPF: Pass (dcma-spm01.ecl.ntt.co.jp: domain of
  x-fn-spp@sl.ntt-tx.co.jp designates 210.232.35.69 as
  permitted sender) identity=mailfrom; client-ip=210.232.35.69;
  receiver=dcma-spm01.ecl.ntt.co.jp;
  envelope-from="x-fn-spp@sl.ntt-tx.co.jp";
  x-sender="x-fn-spp@sl.ntt-tx.co.jp";
  x-conformance=sidf_strict; x-record-type="v=spf1";
  x-record-text="v=spf1 a:mail03.ics.ntt-tx.co.jp
  a:mail04.ics.ntt-tx.co.jp a:mail05.ics.ntt-tx.co.jp
  a:mail06.ics.ntt-tx.co.jp a:mail07.ics.ntt-tx.co.jp
  a:mail08.ics.ntt-tx.co.jp ip4:210.232.35.195
  ip4:210.232.35.196 ip4:210.232.35.65 ip4:210.232.35.66 ~all"
IronPort-PHdr: =?us-ascii?q?9a23=3A7WnN3hZ2LlpYyoHCX6oxQt//LSx94efdIxIV55?=
 =?us-ascii?q?w7irlHbqWk+dHYMVfC4el21QaWD4nQ7vsBkPLT6/mmVGcEp5CdrDYJd9pOT0?=
 =?us-ascii?q?xNkt0YyjQpG9XNEkjnNLjydSVvDIFMUhp+52mTKkwTHtriIkHC5Ha1qzwKSV?=
 =?us-ascii?q?3kLQQgHu3uAcbJitivkeW7+pndeQJN0Sr4b7U3Nw2uhR7V8M8Knc5+OuA6zV?=
 =?us-ascii?q?3LuiISKd5bzm5pO1+f2i3EyJnoo8xb+j9L87It/MtJFL7ievxhC7FTCHIgL3?=
 =?us-ascii?q?xz78qttwGRBQeI43IdVC0RnH8qS0DVqR/8G4zpqgPhsqx7xDXfId2wRrdyWy?=
 =?us-ascii?q?zq46pwSRDugTsKLHZjqTmR0JcqyvkG5kzw7xVkpuycKJmYLv9/Yr/QcZsBSG?=
 =?us-ascii?q?xNU9wQHy1ND4WgbpceWvIbNLUQpI38ql0S6BqmUFP1XKW1kWUO3SKwg/xpto?=
 =?us-ascii?q?ZpWRvL1wEhAd8U5XjfqdywL78XCbnzwaLMizPfc7Vd3nH/8NutEFhprPeSUL?=
 =?us-ascii?q?Z3aceUx1MoElaPnhCer8n+Jyu9zeBLtXSHqvZwE+mozWw/4VIUwHDn1oI3h4?=
 =?us-ascii?q?/Fi5hAgECB+yM8254tDca8DkhnfZu4AN1bsGeYL8ElJ6FqC3EtsyE8xLocvJ?=
 =?us-ascii?q?e9dyVf05UrySnEd+aGeJTbqgKmTuuaJi10wW50YL/qzQjn6lCuk6evM6v8mE?=
 =?us-ascii?q?YPtCdOlcPA82wAxwCGoNbSUeNzpw+oizOG1gSLsadFKltyk7bHboIxhLU30J?=
 =?us-ascii?q?gL1CaLViaknUz3iPfKMEQv4a6u9/iifqWgrZjaNZc8g1P7O6UqwpH5AO8jdA?=
 =?us-ascii?q?4SQy2H6aK30/vh5SibCP1D3Pg/k62B7tbbLt9doLKlRhNFlI0krRSnRz701d?=
 =?us-ascii?q?0ZmSFYalNOY1SBk5SsJ0GIK/e+D+/a4RzkmWVuzvHCZu2nA57WaH7fjPL9bf?=
 =?us-ascii?q?B27Ahe0EIy1YwNvcsMTOtaerSoBwmo5YG9bFdxMhTokby+UJMnjdlYAj/JW/?=
 =?us-ascii?q?7HeKLK7Q3Sv7ppebLWItRI/migY/k9u6y01Cd/wwRHO/L0m8VJIGaxGvAseh?=
 =?us-ascii?q?/LW3fnj9YfHGtPhTIQErWw2mWLSiUbJ3q5Wqt5/Sk+UNvgAIzHAIaxnPqK22?=
 =?us-ascii?q?G5Bs8eamdDA1GKWXDmEufME+dJZiTXOdd5uicAE769V8o9xVels0n40/JrI/?=
 =?us-ascii?q?HV9SsRqZ/4nIIsv6uJzkt0rmEyUZXV2nroLSk8hm4SQj4qwK1z6VdwzFuOy+?=
 =?us-ascii?q?kwgvBVE8BS++IcVw47MZDGyOkpQ9v2Ww/HYpKIUAP8G43gW2prCIlshYFfMC?=
 =?us-ascii?q?MfU524gxvO3jSnGeoZnLmCQYcs9/qFmXX6I4B712qA365njUF1J6kHfWCgmK?=
 =?us-ascii?q?N78BDeQoDTlEDM3bbve6JZxzbV3HyHi2ySoAREQEh7VuPHRTpMAyme5cS8/U?=
 =?us-ascii?q?7EQ7K0XP43dwVHjNWaMoNRbpvvkUkDWOelM9OYYXr7yALSTV6Yg7iLaoTtYW?=
 =?us-ascii?q?AU2i7QXVMFnw4k5mqcNAMiVW+x5njTBzt0GRfzclvhpKNg/WijQBZ+nGToJw?=
 =?us-ascii?q?VxkqC48RkPibmARuMPi/ga7Tw5pWw8FQS41tPSU4HGpgF6OqNAfZYh8BFM0i?=
 =?us-ascii?q?Tbr2kfdtSpfaVrh1pGL0J2tFio0QlrT5lQ18Mt6nEyhAMgLKuZ1AscMTKTxt?=
 =?us-ascii?q?b2JqGSNnm09xfpabazuBmW2YST86YLsKp+ql74+ge1Cg8+4zNs1J9XyzOVtJ?=
 =?us-ascii?q?DDDQ5KDtTwWV1x8QRm4q3KJCI6oYHMsB8keaDmtzbD34p5Quou0VCmY8saLL?=
 =?us-ascii?q?PCHwi0EdVSBtDyerZzwx7zNUhCZ70Urf9pWqHuP/qehPzxZb4mxmn8yz8apt?=
 =?us-ascii?q?ksjAqN73YuELeQmcxembfDg03ZCn/9lAvz6Jmv39ofP3dJQyzhl2DyDYpVLP?=
 =?us-ascii?q?QjL7ZOMn+nJoiM/vs7gpfsX3BC81v6WAEd3ImvZQbXc0y71goW11xF+CX7yx?=
 =?us-ascii?q?v99CR9lnQSloTaxDbHmruwbx5BPHJXAXVyy1zrZ4qs3YkX?=
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: =?us-ascii?q?A0ADAABq1EZch0Uj6NJkGgEBAQEBAgE?=
 =?us-ascii?q?BAQEHAgEBAQGBUwMBAQEBCwGCAGlwAwcIJ4x6jRWYAYF7KIRRAjWCUgEFMQc?=
 =?us-ascii?q?NAQMBAQIBAQEBFAEBAQgNCQgpIwyFSwMDeRAgDCUPSAcSgyIBggCtXoh6gSy?=
 =?us-ascii?q?IAIF9hFqJDoNQgiYCh0oHgXCHSpEVCYckhwGDdhiBZiQqj2CKBIEIkV4DggS?=
 =?us-ascii?q?BQIJsCYIsiTmEfTABAQEwAYscAQE?=
X-SPF-Status: pass
Received: from mail05.ics.ntt-tx.co.jp (HELO mail04.ics.ntt-tx.co.jp) ([210.232.35.69])
  by dcma-spm01.ecl.ntt.co.jp with ESMTP; 22 Jan 2019 17:31:10 +0900
Received: from gwchk03.silk.ntt-tx.co.jp (gwchk03.silk.ntt-tx.co.jp [10.107.0.111])
	by mail04.ics.ntt-tx.co.jp (unknown) with ESMTP id x0M8V0lV013785;
	Tue, 22 Jan 2019 17:31:00 +0900
Received: (from root@localhost)
	by gwchk03.silk.ntt-tx.co.jp (unknown) id x0M8V0Hf014729;
	Tue, 22 Jan 2019 17:31:00 +0900
Received: from gwchk.silk.ntt-tx.co.jp [10.107.0.110] 
	 by gwchk03.silk.ntt-tx.co.jp with ESMTP id SAA07473;
	 Tue, 22 Jan 2019 16:19:21 +0900
Received: from imss04.silk.ntt-tx.co.jp (localhost [127.0.0.1]) by imss04.silk.ntt-tx.co.jp (unknown) with ESMTP id x0M7JLYx015704; Tue, 22 Jan 2019 16:19:21 +0900
Received: from mgate01.silk.ntt-tx.co.jp (smtp02.silk.ntt-tx.co.jp [10.107.0.37]) by imss04.silk.ntt-tx.co.jp (unknown) with ESMTP id x0M7JLoB015696; Tue, 22 Jan 2019 16:19:21 +0900
Message-Id: <201901220719.x0M7JLoB015696@imss04.silk.ntt-tx.co.jp>
Received: from localhost by mgate01.silk.ntt-tx.co.jp (unknown)
	id x0M7JKpQ009185 ; Tue, 22 Jan 2019 16:19:21 +0900
From: x-fn-spp@sl.ntt-tx.co.jp
To: ferruh.yigit@intel.com, ogawa.yasufumi@lab.ntt.co.jp
Cc: spp@dpdk.org
Subject: [PATCH 7/7] controller: add pcap command to SPP controller
Date: Tue, 22 Jan 2019 16:19:20 +0900
X-Mailer: git-send-email 2.18.0
In-Reply-To: <20190122071920.2464-1-x-fn-spp@sl.ntt-tx.co.jp>
References: <20190122071920.2464-1-x-fn-spp@sl.ntt-tx.co.jp>
X-TM-AS-MML: disable

From: Hideyuki Yamashita <yamashita.hideyuki@po.ntt-tx.co.jp>

This update is to 'pcap' command to Shell class for managing
spp_pcap from SPP CLI. Spp_pcap might have several instances, and
deciding which of ones is also similar to other secondary processes.
'pcap' command consists of an indicator and actual command. Here is
an example.

  spp > pcap 3; start

In this example, indicator 'pcap 3;' is before spp_pcap's command
'capture start'. The number in indicator is a secondary ID actually,
so you cannot assign the same ID of others.

You can refer the usage of 'pcap' command with 'help' command.

  spp > help pcap

Signed-off-by: Hideyuki Yamashita <yamashita.hideyuki@po.ntt-tx.co.jp>
Signed-off-by: Naoki Takada <takada.naoki@lab.ntt.co.jp>
---
 src/controller/shell.py | 85 ++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 83 insertions(+), 2 deletions(-)

diff --git a/src/controller/shell.py b/src/controller/shell.py
index 6ce4dca..a99edbc 100644
--- a/src/controller/shell.py
+++ b/src/controller/shell.py
@@ -11,6 +11,7 @@ from .commands import server
 from .commands import topo
 from .commands import vf
 from .commands import mirror
+from .commands import pcap
 import os
 import re
 import readline
@@ -73,6 +74,10 @@ class Shell(cmd.Cmd, object):
             self.secondaries['mirror'][sec_id] = mirror.SppMirror(
                     self.spp_ctl_cli, sec_id)
 
+        self.spp_pcaps = {}
+        for sec_id in self.get_sec_ids('pcap'):
+            self.spp_pcaps[sec_id] = pcap.SppPcap(self.spp_ctl_cli, sec_id)
+
     def default(self, line):
         """Define defualt behaviour.
 
@@ -97,7 +102,7 @@ class Shell(cmd.Cmd, object):
     def get_sec_ids(self, ptype):
         """Return a list of IDs of running secondary processes.
 
-        'ptype' is 'nfv', 'vf' or 'mirror'.
+        'ptype' is 'nfv', 'vf' or 'mirror' or 'pcap'.
         """
 
         ids = []
@@ -142,6 +147,7 @@ class Shell(cmd.Cmd, object):
                 sec_obj['nfv'] = []
                 sec_obj['vf'] = []
                 sec_obj['mirror'] = []
+                sec_obj['pcap'] = []
 
                 for proc_obj in proc_objs:
                     if proc_obj['type'] == 'primary':
@@ -158,7 +164,7 @@ class Shell(cmd.Cmd, object):
                 print('- secondary:')
                 print('  - processes:')
                 cnt = 1
-                for pt in ['nfv', 'vf', 'mirror']:
+                for pt in ['nfv', 'vf', 'mirror', 'pcap']:
                     for obj in sec_obj[pt]:
                         print('    %d: %s:%s' %
                               (cnt, obj['type'], obj['client-id']))
@@ -546,6 +552,81 @@ class Shell(cmd.Cmd, object):
                 return self.secondaries['mirror'][idx].complete(
                         self.get_sec_ids('mirror'), text, line, begidx, endidx)
 
+    def do_pcap(self, cmd):
+        """Send a command to spp_pcap.
+
+        spp_pcap is a secondary process for duplicating incoming
+        packets to be used as similar to TaaS in OpenStack. This
+        command has four sub commands.
+          * status
+          * start
+          * stop
+          * exit
+
+        Each of sub commands other than 'status' takes several parameters
+        for detailed operations. Notice that 'start' for launching a worker
+        is replaced with 'stop' for terminating. 'exit' for spp_pcap
+        terminating.
+
+        Examples:
+
+        # (1) show status of worker threads and resources
+        spp > pcap 1; status
+
+        # (2) launch capture thread
+        spp > pcap 1; start
+
+        # (3) terminate capture thread
+        spp > pcap 1; stop
+
+        # (4) terminate spp_pcap secondaryd
+        spp > pcap 1; exit
+        """
+
+        # remove unwanted spaces to avoid invalid command error
+        tmparg = self.clean_cmd(cmd)
+        cmds = tmparg.split(';')
+        if len(cmds) < 2:
+            print("Required an ID and ';' before the command.")
+        elif str.isdigit(cmds[0]):
+            self.spp_pcaps[int(cmds[0])].run(cmds[1])
+        else:
+            print('Invalid command: %s' % tmparg)
+
+    def complete_pcap(self, text, line, begidx, endidx):
+        """Completion for pcap command"""
+
+        line = self.clean_cmd(line)
+
+        tokens = line.split(';')
+        if len(tokens) == 1:
+            # Add SppPcap of sec_id if it is not exist
+            sec_ids = self.get_sec_ids('pcap')
+            for idx in sec_ids:
+                if self.spp_pcaps[idx] is None:
+                    self.spp_pcaps[idx] = pcap.SppPcap(self.spp_ctl_cli, idx)
+
+            if len(line.split()) == 1:
+                res = [str(i)+';' for i in sec_ids]
+            else:
+                if not (';' in line):
+                    res = [str(i)+';'
+                           for i in sec_ids
+                           if (str(i)+';').startswith(text)]
+            return res
+        elif len(tokens) == 2:
+            # Split tokens like as from 'pcap 1' to ['pcap', '1']
+            first_tokens = tokens[0].split(' ')
+            if len(first_tokens) == 2:
+                idx = int(first_tokens[1])
+
+                # Add SppPcap of sec_id if it is not exist
+                if self.spp_pcaps[idx] is None:
+                    self.spp_pcaps[idx] = pcap.SppPcap(self.spp_ctl_cli, idx)
+
+                return self.spp_pcaps[idx].complete(
+                        self.get_sec_ids('pcap'), text, line, begidx, endidx)
+
     def do_record(self, fname):
         """Save commands as a recipe file.
 
-- 
2.17.1



