From 18e985f9a6c3589f85216de4dd8f7346dcd924d2 Mon Sep 17 00:00:00 2001
From: Hideyuki Yamashita <yamashita.hideyuki@po.ntt-tx.co.jp>
Date: Sat, 2 Feb 2019 17:38:38 +0900
Subject: [PATCH 1/3] spp_pcap: change burst packet maximum

For handling of write thread load reduction to change the maximum number
of acquisition packets to 256 from 32.

Signed-off-by: Hideyuki Yamashita <yamashita.hideyuki@po.ntt-tx.co.jp>
Signed-off-by: Naoki Takada <takada.naoki@lab.ntt.co.jp>
---
 src/pcap/spp_pcap.c | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/pcap/spp_pcap.c b/src/pcap/spp_pcap.c
index 2716c01..e10a798 100644
--- a/src/pcap/spp_pcap.c
+++ b/src/pcap/spp_pcap.c
@@ -44,6 +44,7 @@
 #define DEFAULT_FILE_LIMIT 1073741824 /* 1GiB */
 #define PORT_STR_SIZE 16
 #define RING_SIZE 8192
+#define MAX_PCAP_BURST 256
 /* macro */
 /* Ensure snaplen not to be over the maximum size */
 #define TRANCATE_SNAPLEN(a, b) (((a) < (b))?(a):(b))
@@ -761,7 +762,7 @@ static int pcap_proc_receive(int lcore_id)
 	int nb_rx = 0;
 	int nb_tx = 0;
 	struct spp_port_info *rx;
-	struct rte_mbuf *bufs[MAX_PKT_BURST];
+	struct rte_mbuf *bufs[MAX_PCAP_BURST];
 	struct pcap_mng_info *info = &g_pcap_info[lcore_id];
 	struct rte_ring *write_ring = g_pcap_option.cap_ring;
 
@@ -791,7 +792,7 @@ static int pcap_proc_receive(int lcore_id)
 	/* Receive packets */
 	rx = &g_pcap_option.port_cap;
 
-	nb_rx = spp_eth_rx_burst(rx->dpdk_port, 0, bufs, MAX_PKT_BURST);
+	nb_rx = spp_eth_rx_burst(rx->dpdk_port, 0, bufs, MAX_PCAP_BURST);
 	if (unlikely(nb_rx == 0))
 		return SPP_RET_OK;
 
@@ -815,7 +816,7 @@ static int pcap_proc_write(int lcore_id)
 	int ret = SPP_RET_OK;
 	int buf;
 	int nb_rx = 0;
-	struct rte_mbuf *bufs[MAX_PKT_BURST];
+	struct rte_mbuf *bufs[MAX_PCAP_BURST];
 	struct rte_mbuf *mbuf = NULL;
 	struct pcap_mng_info *info = &g_pcap_info[lcore_id];
 	struct rte_ring *read_ring = g_pcap_option.cap_ring;
@@ -842,7 +843,7 @@ static int pcap_proc_write(int lcore_id)
 	}
 
 	/* Read packets */
-	nb_rx =  rte_ring_dequeue_bulk(read_ring, (void *)bufs, MAX_PKT_BURST,
+	nb_rx =  rte_ring_dequeue_bulk(read_ring, (void *)bufs, MAX_PCAP_BURST,
 									NULL);
 	if (unlikely(nb_rx == 0))
 		return SPP_RET_OK;
@@ -865,6 +866,7 @@ static int pcap_proc_write(int lcore_id)
 	/* mbuf free */
 	for (buf = 0; buf < nb_rx; buf++)
 		rte_pktmbuf_free(bufs[buf]);
+
 	return ret;
 }
 
-- 
2.18.0

