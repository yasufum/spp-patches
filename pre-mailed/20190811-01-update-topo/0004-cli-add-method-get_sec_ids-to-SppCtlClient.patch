From 4a631e5794b8530ca07d71f5c704da6454084535 Mon Sep 17 00:00:00 2001
From: Yasufumi Ogawa <yasufum.o@gmail.com>
Date: Thu, 8 Aug 2019 12:57:18 +0900
Subject: [PATCH 4/9] cli: add method get_sec_ids to SppCtlClient

Shell class has get_sec_ids() for retrieving secondary IDs of given
type by requesting all processes information to spp-ctl. However, it is
better to request the information from SppCtlClient which a delegator
for the requesting.

This update is to remove get_sec_ids() from Shell and add the same
method to SppCtlClient.

Signed-off-by: Yasufumi Ogawa <yasufum.o@gmail.com>
---
 src/cli/commands/topo.py  | 16 ++++++-------
 src/cli/shell.py          | 48 ++++++++++++++-------------------------
 src/cli/spp_ctl_client.py | 18 +++++++++++++++
 3 files changed, 43 insertions(+), 39 deletions(-)

diff --git a/src/cli/commands/topo.py b/src/cli/commands/topo.py
index 664606e..f80d2dc 100644
--- a/src/cli/commands/topo.py
+++ b/src/cli/commands/topo.py
@@ -40,18 +40,18 @@ class SppTopo(object):
             print('Config "topo_size" is invalid value.')
             exit()
 
-    def run(self, args, sec_ids):
+    def run(self, args):
         args_ary = args.split()
         if len(args_ary) == 0:
             print("Usage: topo dst [ftype]")
             return False
         elif (args_ary[0] == "term") or (args_ary[0] == "http"):
-            self.show(args_ary[0], sec_ids, self.graph_size)
+            self.show(args_ary[0], self.graph_size)
         elif len(args_ary) == 1:
             ftype = args_ary[0].split(".")[-1]
-            self.output(args_ary[0], sec_ids, ftype)
+            self.output(args_ary[0], ftype)
         elif len(args_ary) == 2:
-            self.output(args_ary[0], sec_ids, args_ary[1])
+            self.output(args_ary[0], args_ary[1])
         else:
             print("Usage: topo dst [ftype]")
 
@@ -81,11 +81,11 @@ class SppTopo(object):
         else:
             return False
 
-    def show(self, dtype, sec_ids, size):
+    def show(self, dtype, size):
         res_ary = []
         error_codes = self.spp_ctl_cli.rest_common_error_codes
 
-        for sec_id in sec_ids:
+        for sec_id in self.spp_ctl_cli.get_sec_ids('nfv'):
             res = self.spp_ctl_cli.get('nfvs/{sid}'.format(sid=sec_id))
             if res.status_code == 200:
                 res_ary.append(res.json())
@@ -103,11 +103,11 @@ class SppTopo(object):
         else:
             print("Invalid file type")
 
-    def output(self, fname, sec_ids, ftype="dot"):
+    def output(self, fname, ftype="dot"):
         res_ary = []
         error_codes = self.spp_ctl_cli.rest_common_error_codes
 
-        for sec_id in sec_ids:
+        for sec_id in self.spp_ctl_cli.get_sec_ids('nfv'):
             res = self.spp_ctl_cli.get('nfvs/{sid}'.format(sid=sec_id))
             if res.status_code == 200:
                 res_ary.append(res.json())
diff --git a/src/cli/shell.py b/src/cli/shell.py
index 8eae982..ebea911 100644
--- a/src/cli/shell.py
+++ b/src/cli/shell.py
@@ -90,22 +90,22 @@ class Shell(cmd.Cmd, object):
 
         self.secondaries = {}
         self.secondaries['nfv'] = {}
-        for sec_id in self.get_sec_ids('nfv'):
+        for sec_id in self.spp_ctl_cli.get_sec_ids('nfv'):
             self.secondaries['nfv'][sec_id] = nfv.SppNfv(
                     self.spp_ctl_cli, sec_id)
 
         self.secondaries['vf'] = {}
-        for sec_id in self.get_sec_ids('vf'):
+        for sec_id in self.spp_ctl_cli.get_sec_ids('vf'):
             self.secondaries['vf'][sec_id] = vf.SppVf(
                     self.spp_ctl_cli, sec_id)
 
         self.secondaries['mirror'] = {}
-        for sec_id in self.get_sec_ids('mirror'):
+        for sec_id in self.spp_ctl_cli.get_sec_ids('mirror'):
             self.secondaries['mirror'][sec_id] = mirror.SppMirror(
                     self.spp_ctl_cli, sec_id)
 
         self.secondaries['pcap'] = {}
-        for sec_id in self.get_sec_ids('pcap'):
+        for sec_id in self.spp_ctl_cli.get_sec_ids('pcap'):
             self.secondaries['pcap'][sec_id] = pcap.SppPcap(
                     self.spp_ctl_cli, sec_id)
 
@@ -142,24 +142,6 @@ class Shell(cmd.Cmd, object):
         """
         pass
 
-    def get_sec_ids(self, ptype):
-        """Return a list of IDs of running secondary processes.
-
-        'ptype' is 'nfv', 'vf' or 'mirror' or 'pcap'.
-        """
-
-        ids = []
-        res = self.spp_ctl_cli.get('processes')
-        if res is not None:
-            if res.status_code == 200:
-                try:
-                    for ent in res.json():
-                        if ent['type'] == ptype:
-                            ids.append(ent['client-id'])
-                except KeyError as e:
-                    print('Error: {} is not defined!'.format(e))
-        return ids
-
     def print_status(self):
         """Display information about connected clients."""
 
@@ -347,7 +329,7 @@ class Shell(cmd.Cmd, object):
         tokens = line.split(';')
         if len(tokens) == 1:
             # Add SppNfv of sec_id if it is not exist
-            sec_ids = self.get_sec_ids('nfv')
+            sec_ids = self.spp_ctl_cli.get_sec_ids('nfv')
             for idx in sec_ids:
                 if self.secondaries['nfv'][idx] is None:
                     self.secondaries['nfv'][idx] = nfv.SppNfv(
@@ -372,7 +354,8 @@ class Shell(cmd.Cmd, object):
                             self.spp_ctl_cli, idx)
 
                 res = self.secondaries['nfv'][idx].complete(
-                        self.get_sec_ids('nfv'), text, line, begidx, endidx)
+                        self.spp_ctl_cli.get_sec_ids('nfv'),
+                        text, line, begidx, endidx)
 
                 # logger.info(res)
                 return res
@@ -407,7 +390,7 @@ class Shell(cmd.Cmd, object):
         tokens = line.split(';')
         if len(tokens) == 1:
             # Add SppVf of sec_id if it is not exist
-            sec_ids = self.get_sec_ids('vf')
+            sec_ids = self.spp_ctl_cli.get_sec_ids('vf')
             for idx in sec_ids:
                 if self.secondaries['vf'][idx] is None:
                     self.secondaries['vf'][idx] = vf.SppVf(
@@ -432,7 +415,8 @@ class Shell(cmd.Cmd, object):
                             self.spp_ctl_cli, idx)
 
                 return self.secondaries['vf'][idx].complete(
-                        self.get_sec_ids('vf'), text, line, begidx, endidx)
+                        self.spp_ctl_cli.get_sec_ids('vf'),
+                        text, line, begidx, endidx)
 
     def do_mirror(self, cmd):
         """Send a command to spp_mirror."""
@@ -463,7 +447,7 @@ class Shell(cmd.Cmd, object):
         tokens = line.split(';')
         if len(tokens) == 1:
             # Add SppMirror of sec_id if it is not exist
-            sec_ids = self.get_sec_ids('mirror')
+            sec_ids = self.spp_ctl_cli.get_sec_ids('mirror')
             for idx in sec_ids:
                 if self.secondaries['mirror'][idx] is None:
                     self.secondaries['mirror'][idx] = mirror.SppMirror(
@@ -489,7 +473,8 @@ class Shell(cmd.Cmd, object):
                             self.spp_ctl_cli, idx)
 
                 return self.secondaries['mirror'][idx].complete(
-                        self.get_sec_ids('mirror'), text, line, begidx, endidx)
+                        self.spp_ctl_cli.get_sec_ids('mirror'),
+                        text, line, begidx, endidx)
 
     def do_pcap(self, cmd):
         """Send a command to spp_pcap."""
@@ -520,7 +505,7 @@ class Shell(cmd.Cmd, object):
         tokens = line.split(';')
         if len(tokens) == 1:
             # Add SppPcap of sec_id if it is not exist
-            sec_ids = self.get_sec_ids('pcap')
+            sec_ids = self.spp_ctl_cli.get_sec_ids('pcap')
             for idx in sec_ids:
                 if self.secondaries['pcap'][idx] is None:
                     self.secondaries['pcap'][idx] = pcap.SppPcap(
@@ -546,7 +531,8 @@ class Shell(cmd.Cmd, object):
                             self.spp_ctl_cli, idx)
 
                 return self.secondaries['pcap'][idx].complete(
-                        self.get_sec_ids('pcap'), text, line, begidx, endidx)
+                        self.spp_ctl_cli.get_sec_ids('pcap'),
+                        text, line, begidx, endidx)
 
     def do_record(self, fname):
         """Save commands as a recipe file."""
@@ -908,7 +894,7 @@ class Shell(cmd.Cmd, object):
 
     def do_topo(self, args):
         """Output network topology."""
-        self.spp_topo.run(args, self.get_sec_ids('nfv'))
+        self.spp_topo.run(args)
 
     def help_topo(self):
         """Print help message of topo command."""
diff --git a/src/cli/spp_ctl_client.py b/src/cli/spp_ctl_client.py
index 3cce628..2d898f7 100644
--- a/src/cli/spp_ctl_client.py
+++ b/src/cli/spp_ctl_client.py
@@ -68,3 +68,21 @@ class SppCtlClient(object):
             return False
         else:
             return True
+
+    def get_sec_ids(self, ptype):
+        """Return a list of IDs of running secondary processes.
+
+        'ptype' is 'nfv', 'vf' or 'mirror' or 'pcap'.
+        """
+
+        ids = []
+        res = self.get('processes')
+        if res is not None:
+            if res.status_code == 200:
+                try:
+                    for ent in res.json():
+                        if ent['type'] == ptype:
+                            ids.append(ent['client-id'])
+                except KeyError as e:
+                    print('Error: {} is not defined!'.format(e))
+        return ids
-- 
2.17.1

