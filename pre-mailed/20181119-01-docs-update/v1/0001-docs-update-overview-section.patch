From dc522bb406ec1956a4cce598f55b5dbe31ce3975 Mon Sep 17 00:00:00 2001
From: Yasufumi Ogawa <ogawa.yasufumi@lab.ntt.co.jp>
Date: Fri, 16 Nov 2018 01:32:16 +0900
Subject: [PATCH 1/5] docs: update overview section

Some of contents of overview section is old and needd to be updated.
This patch is to update for the latest design of SPP controller which
is devided into front-end CLI and back-end server. It is also added
an explanation of OpenStack plugin `networking-spp`.

Signed-off-by: Yasufumi Ogawa <ogawa.yasufumi@lab.ntt.co.jp>
---
 docs/guides/overview.rst | 41 +++++++++++++++++++++++++++--------------
 1 file changed, 27 insertions(+), 14 deletions(-)

diff --git a/docs/guides/overview.rst b/docs/guides/overview.rst
index 2529f77..386ac49 100644
--- a/docs/guides/overview.rst
+++ b/docs/guides/overview.rst
@@ -21,28 +21,41 @@ NFV (Network Function Virtualization).
 With SPP, user is able to configure network easily and dynamically
 via simple patch panel like interface.
 
-The goal of SPP is to easily interconnect DPDK applications together,
-and assign resources dynamically to these applications to build a
-pipeline.
+The goal of SPP is to easily interconnect NFV applications via high
+thoughput network interfaces provided by DPDK and change configurations
+of resources dynamically to applications to build pipelines.
+
 
 Design
 ------
 
-SPP is composed of a primary DPDK application that is
-responsible for resource management. This primary application doesn't
-interact with any traffic, and is used to manage creation and freeing of
-resources only.
+SPP is composed of several DPDK processes and controller processes [1].
+
+In terms of DPDK processes, SPP is derived from DPDK's multi-process sample
+application and it consists of a primary process and multiple secondary
+processes.
+SPP primary process is responsible for resource management, for example, ports,
+mbufs or shared memory. On the other hand, secondary processes are working for
+tasks.
+
+SPP is controlled from python based management framework. It consists of
+front-end CLI and back-end server process.
+SPP's front-end CLI provides a patch panel like interface for users.
+This CLI process parses user input and sends request to the back-end via REST
+APIs. It means that the back-end server process accepts requests from other
+than CLI. It enables developers to implement control interface such as GUI, or
+plugin for other framework.
+`networking-spp
+<https://github.com/openstack/networking-spp>`_
+is a Neutron ML2 plugin for using SPP with OpenStack.
+By using networking-spp and doing some of extra tunings for optimization, you
+can deploy high-performance NFV services on OpenStack [2].
 
-A Python based management interface, SPP controller, is provided to
-control the primary
-DPDK application to create resources, which are then to be used by
-secondary applications.
-This management application provides a socket
-based interface for the primary and secondary DPDK applications to
-interface to the manager.
 
 Reference
 ---------
 
 * [1] `Implementation and Testing of Soft Patch Panel
   <https://dpdksummit.com/Archive/pdf/2017USA/Implementation%20and%20Testing%20of%20Soft%20Patch%20Panel.pdf>`_
+* [2] `Integrating OpenStack with DPDK for High Performance Applications
+  <https://www.openstack.org/summit/vancouver-2018/summit-schedule/events/20826>`_
-- 
2.13.1

