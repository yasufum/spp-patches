From b6b692fd3395f27598c4bf825d2f551c4ed6d422 Mon Sep 17 00:00:00 2001
From: Yasufumi Ogawa <yasufum.o@gmail.com>
Date: Thu, 20 Jun 2019 17:47:15 +0900
Subject: [PATCH 1/4] spp_nfv: remove global vars of spp-ctl IP and port

This update is to remove global variable of IP address and port number
of spp-ctl, and functions for gettting and setting them instead.

Signed-off-by: Yasufumi Ogawa <yasufum.o@gmail.com>
---
 src/nfv/commands.h  |  6 ++++--
 src/nfv/main.c      |  6 +++++-
 src/nfv/params.h    |  7 -------
 src/shared/common.c | 48 +++++++++++++++++++++++++++++++++++++++++++++
 src/shared/common.h | 42 ++++++++++++++++++++++++++++++++++++++-
 5 files changed, 98 insertions(+), 11 deletions(-)

diff --git a/src/nfv/commands.h b/src/nfv/commands.h
index 708d084..11e434a 100644
--- a/src/nfv/commands.h
+++ b/src/nfv/commands.h
@@ -116,6 +116,7 @@ do_connection(int *connected, int *sock)
 {
 	static struct sockaddr_in servaddr;
 	int ret = 0;
+	char ctl_ip[IPADDR_LEN] = { 0 };  /* spp_ctl's IP addr. */
 
 	if (*connected == 0) {
 		if (*sock < 0) {
@@ -127,8 +128,9 @@ do_connection(int *connected, int *sock)
 			/*Create of the tcp socket*/
 			memset(&servaddr, 0, sizeof(servaddr));
 			servaddr.sin_family = AF_INET;
-			servaddr.sin_addr.s_addr = inet_addr(server_ip);
-			servaddr.sin_port = htons(server_port);
+			get_spp_ctl_ip(ctl_ip);
+			servaddr.sin_addr.s_addr = inet_addr(ctl_ip);
+			servaddr.sin_port = htons(get_spp_ctl_port());
 		}
 
 		RTE_LOG(INFO,
diff --git a/src/nfv/main.c b/src/nfv/main.c
index ae4168c..9cfe49a 100644
--- a/src/nfv/main.c
+++ b/src/nfv/main.c
@@ -65,6 +65,8 @@ parse_app_args(int argc, char *argv[])
 	int cli_id;
 	char **argvopt = argv;
 	const char *progname = argv[0];
+	char *ctl_ip;  /* IP address of spp_ctl. */
+	int ctl_port;  /* Port num to connect spp_ctl. */
 	int ret;
 
 	while ((opt = getopt_long(argc, argvopt, "n:s:", lgopts,
@@ -81,7 +83,9 @@ parse_app_args(int argc, char *argv[])
 			set_client_id(cli_id);
 			break;
 		case 's':
-			ret = parse_server(&server_ip, &server_port, optarg);
+			ret = parse_server(&ctl_ip, &ctl_port, optarg);
+			set_spp_ctl_ip(ctl_ip);
+			set_spp_ctl_port(ctl_port);
 			if (ret != 0) {
 				usage(progname);
 				return -1;
diff --git a/src/nfv/params.h b/src/nfv/params.h
index 9ddf79d..06e6f1f 100644
--- a/src/nfv/params.h
+++ b/src/nfv/params.h
@@ -26,13 +26,6 @@ static struct port ports_fwd_array[RTE_MAX_ETHPORTS];
 /* the port details */
 struct port_info *ports;
 
-/*
- * our client id number - tells us which rx queue to read, and NIC TX
- * queue to write to.
- */
-static char *server_ip;
-static int server_port;
-
 static enum cmd_type cmd;
 
 static struct port_map port_map[RTE_MAX_ETHPORTS];
diff --git a/src/shared/common.c b/src/shared/common.c
index 9c244e5..a195929 100644
--- a/src/shared/common.c
+++ b/src/shared/common.c
@@ -8,6 +8,9 @@
 
 #define RTE_LOGTYPE_SHARED RTE_LOGTYPE_USER1
 
+char spp_ctl_ip[IPADDR_LEN];  /* IP address of spp_ctl. */
+int spp_ctl_port;  /* Port num to connect spp_ctl. */
+
 /**
  * Set log level of type RTE_LOGTYPE_USER* to given level, for instance,
  * RTE_LOG_INFO or RTE_LOG_DEBUG.
@@ -115,3 +118,48 @@ int get_sec_dir(char *proc_name, char *dir_name)
 	}
 	return 0;
 }
+
+/* Get IP address of spp_ctl as string. */
+int get_spp_ctl_ip(char *s_ip)
+{
+	sprintf(s_ip, "%s", spp_ctl_ip);
+	if (spp_ctl_ip == NULL) {
+		RTE_LOG(ERR, SHARED, "Failed to get IP of spp_ctl.\n");
+		return -1;
+	}
+	return 0;
+}
+
+/* Set IP address of spp_ctl. */
+int set_spp_ctl_ip(const char *s_ip)
+{
+	memset(spp_ctl_ip, 0x00, sizeof(spp_ctl_ip));
+	sprintf(spp_ctl_ip, "%s", s_ip);
+	if (spp_ctl_ip == NULL) {
+		RTE_LOG(ERR, SHARED, "Failed to set IP of spp_ctl.\n");
+		return -1;
+	}
+	return 0;
+}
+
+/* Get port number for connecting to spp_ctl as string. */
+int get_spp_ctl_port(void)
+{
+	if (spp_ctl_port < 0) {
+		RTE_LOG(ERR, SHARED, "Server port is not initialized.\n");
+		return -1;
+	}
+	return spp_ctl_port;
+}
+
+/* Set port number for connecting to spp_ctl. */
+int set_spp_ctl_port(int s_port)
+{
+	if (s_port < 0) {
+		RTE_LOG(ERR, SHARED, "Given invalid port number '%d'.\n",
+				s_port);
+		return -1;
+	}
+	spp_ctl_port = s_port;
+	return 0;
+}
diff --git a/src/shared/common.h b/src/shared/common.h
index 9b8d897..78d2520 100644
--- a/src/shared/common.h
+++ b/src/shared/common.h
@@ -10,6 +10,8 @@
 #include <unistd.h>
 #include <rte_ethdev_driver.h>
 
+#define IPADDR_LEN 16  /* Length of IP address in string. */
+
 #define MSG_SIZE 2048  /* socket buffer len */
 
 #define SOCK_RESET  -1
@@ -125,11 +127,49 @@ int set_user_log_level(int num_user_log, uint32_t log_level);
 int set_user_log_debug(int num_user_log);
 
 int parse_num_clients(uint16_t *num_clients, const char *clients);
+
 int parse_server(char **server_ip, int *server_port, char *server_addr);
 
-/* Get directory name of given proc_name */
+/**
+ * Get directory name of given proc_name.
+ *
+ * @param[in] proc_name Name of sec process such as spp_nfv.
+ * @param[out] dir_name Directory name.
+ * @return 0
+ */
 int get_sec_dir(char *proc_name, char *dir_name);
 
 extern uint8_t lcore_id_used[RTE_MAX_LCORE];
 
+/**
+ * Get IP address of spp_ctl as string.
+ *
+ * @param[in,out] s_ip IP address of spp_ctl.
+ * @return 0 if succeeded, or -1 if failed.
+ */
+int get_spp_ctl_ip(char *s_ip);
+
+/**
+ * Set IP address of spp_ctl.
+ *
+ * @param[in] s_ip IP address of spp_ctl.
+ * @return 0 if succeeded, or -1 if failed.
+ */
+int set_spp_ctl_ip(const char *s_ip);
+
+/**
+ * Get port number for connecting to spp_ctl as string.
+ *
+ * @return Port number, or -1 if failed.
+ */
+int get_spp_ctl_port(void);
+
+/**
+ * Set port number for connecting to spp_ctl.
+ *
+ * @param[in] s_port Port number for spp_ctl.
+ * @return 0 if succeeded, or -1 if failed.
+ */
+int set_spp_ctl_port(int s_port);
+
 #endif
-- 
2.17.1

